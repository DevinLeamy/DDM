{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/chat-icon/chat-icon.component.ts","webpack:///src/app/components/chat-icon/chat-icon.component.html","webpack:///src/app/components/chat-page/global-chat/global-chat.component.ts","webpack:///src/app/components/chat-page/global-chat/global-chat.component.html","webpack:///src/app/components/chat-page/global-chat/related-chats/related-chats.component.ts","webpack:///src/app/components/chat-page/global-chat/related-chats/related-chats.component.html","webpack:///src/app/components/chat-page/message-view/chat-title/chat-subscribe/chat-subscribe-admin-dialog/chat-subscribe-admin-dialog.component.ts","webpack:///src/app/components/chat-page/message-view/chat-title/chat-subscribe/chat-subscribe-admin-dialog/chat-subscribe-admin-dialog.component.html","webpack:///src/app/components/chat-page/message-view/chat-title/chat-subscribe/chat-subscribe.component.ts","webpack:///src/app/components/chat-page/message-view/chat-title/chat-subscribe/chat-subscribe.component.html","webpack:///src/app/components/chat-page/message-view/chat-title/chat-title.component.ts","webpack:///src/app/components/chat-page/message-view/chat-title/chat-title.component.html","webpack:///src/app/components/chat-page/message-view/message-create/message-create.component.ts","webpack:///src/app/components/chat-page/message-view/message-create/message-create.component.html","webpack:///src/app/components/chat-page/message-view/message-view.component.ts","webpack:///src/app/components/chat-page/message-view/message-view.component.html","webpack:///src/app/components/chat-page/message-view/messages/message-received/message-received.component.ts","webpack:///src/app/components/chat-page/message-view/messages/message-received/message-received.component.html","webpack:///src/app/components/chat-page/message-view/messages/message-sent/message-sent.component.ts","webpack:///src/app/components/chat-page/message-view/messages/message-sent/message-sent.component.html","webpack:///src/app/components/chat-page/message-view/messages/messages.component.ts","webpack:///src/app/components/chat-page/message-view/messages/messages.component.html","webpack:///src/app/components/chat-page/subscribers-view/subscriber/subscriber.component.ts","webpack:///src/app/components/chat-page/subscribers-view/subscriber/subscriber.component.html","webpack:///src/app/components/chat-page/subscribers-view/subscribers-view.component.ts","webpack:///src/app/components/chat-page/subscribers-view/subscribers-view.component.html","webpack:///src/app/components/chat-selection/chat-option/chat-option.ts","webpack:///src/app/components/chat-selection/chat-option/chat-option.html","webpack:///src/app/components/chat-selection/chat-selection.ts","webpack:///src/app/components/chat-selection/chat-selection.html","webpack:///src/app/components/create-chat/chat-tags/chat-tags.component.ts","webpack:///src/app/components/create-chat/chat-tags/chat-tags.component.html","webpack:///src/app/components/create-chat/chat-tags/tag/tag.component.ts","webpack:///src/app/components/create-chat/chat-tags/tag/tag.component.html","webpack:///src/app/components/create-chat/create-chat.component.ts","webpack:///src/app/components/create-chat/create-chat.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/home-page/chat-display/chat-display.component.ts","webpack:///src/app/components/home-page/chat-display/chat-display.component.html","webpack:///src/app/components/home-page/home-page.component.ts","webpack:///src/app/components/home-page/home-page.component.html","webpack:///src/app/components/home-page/popular-chats/popular-chats.component.ts","webpack:///src/app/components/home-page/popular-chats/popular-chats.component.html","webpack:///src/app/components/home-page/recent-chats/recent-chats.component.ts","webpack:///src/app/components/home-page/recent-chats/recent-chats.component.html","webpack:///src/app/components/home-page/recommended-chats/recommended-chats.component.ts","webpack:///src/app/components/home-page/recommended-chats/recommended-chats.component.html","webpack:///src/app/components/image-fab/image-fab.component.ts","webpack:///src/app/components/image-fab/image-fab.component.html","webpack:///src/app/components/login-page/login-page.component.ts","webpack:///src/app/components/login-page/login-page.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/register-page/register-page.component.ts","webpack:///src/app/components/register-page/register-page.component.html","webpack:///src/app/components/user-icon/user-icon.component.ts","webpack:///src/app/components/user-icon/user-icon.component.html","webpack:///src/app/components/user-page/user-chats-view/user-chats-view.component.ts","webpack:///src/app/components/user-page/user-chats-view/user-chats-view.component.html","webpack:///src/app/components/user-page/user-friends-view/friend-request/friend-request.component.ts","webpack:///src/app/components/user-page/user-friends-view/friend-request/friend-request.component.html","webpack:///src/app/components/user-page/user-friends-view/user-friends-view.component.ts","webpack:///src/app/components/user-page/user-friends-view/user-friends-view.component.html","webpack:///src/app/components/user-page/user-page.component.ts","webpack:///src/app/components/user-page/user-page.component.html","webpack:///src/app/components/user-page/user-view/user-view.component.ts","webpack:///src/app/components/user-page/user-view/user-view.component.html","webpack:///src/app/services/authentication.ts","webpack:///src/app/services/chat-create.ts","webpack:///src/app/services/chat.ts","webpack:///src/app/services/chats.ts","webpack:///src/app/services/token.interceptor.ts","webpack:///src/app/services/user.ts","webpack:///src/app/services/users.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","ChatIconComponent","GlobalChatComponent","chatService","route","usersService","router","routeReuseStrategy","shouldReuseRoute","params","subscribe","chatId","initChatService","getChat","chatSub","getChatUpdated","chat","users","undefined","userIds","i","subs","length","userId","indexOf","getUserSub","push","messages","senderId","getUsers","RelatedChatsComponent","chatsService","chatIds","chats","getRelatedChatIds","tags","category","_id","getChats","unsubscribe","ChatSubscribeAdminDialogComponent","dialogRef","data","close","event","selectedImage","target","files","reader","FileReader","readAsDataURL","onload","originalDataUrl","result","scaleImage","type","dataUrl","selectedImageUrl","newWidth","newHeight","imageType","imageArguments","callback","image","Image","canvas","document","createElement","width","height","ctx","getContext","drawImage","newDataUrl","toDataURL","src","setChatId","setChatImage","onImageSelected","onExit","ChatSubscribeComponent","authService","userService","dialog","subscribing","userSub","getUserUpdated","user","getUser","isAdmin","subscribeToChat","updateUsers","reject","console","log","unsubscribeFromChat","isAuthenticated","getChatSub","open","afterClosed","ChatTitleComponent","MessageCreateComponent","messageForm","message","value","trim","timestamp","Date","getTime","postMessage","resetForm","MessageViewComponent","MessageReceivedComponent","username","online","timestampMil","setTime","rawTime","toLocaleTimeString","time","parseRawTime","rawDate","toDateString","date","parseRawDate","splitTime","split","toLowerCase","dateSplit","MessageSentComponent","MessagesComponent","scrollToBottom","compressedMessages","len","text","concat","sent","currentPos","messageContainer","nativeElement","scrollHeight","scrollTop","err","SubscriberComponent","adminId","subId","SubscribersViewComponent","ChatOptionComponent","expanded","subCount","setSelectedChatId","setAsSelectedChat","backgroundColor","borderRadius","marginBottom","marginTop","animations","ChatSelectionComponent","color","ChatTagsComponent","chatCreateService","newChatSub","getNewChatUpdated","newChat","updateNewChat","tagForm","newTag","fixTag","tag","join","addTag","replaceAt","current","index","replacement","substr","queryText","TagComponent","removeTag","tagText","CreateChatComponent","categories","initNewChat","chatForm","invalid","postChat","createChat","HeaderComponent","headerTextElement","style","ChatDisplayComponent","selectedChatIdSub","getSelectedChatIdUpdated","selectedChat","selectedChatSub","HomePageComponent","selectedChatId","getPopularChatIds","getRecentChatIds","getRecommendedChatIds","PopularChatsComponent","RecentChatsComponent","RecommendedChatsComponent","ImageFabComponent","DomSanitationService","LoginPageComponent","loggingIn","loginForm","errorMessage","email","password","login","encapsulation","None","NavbarComponent","RegisterPageComponent","registering","registerForm","String","reEnteredPassword","isValidEmail","passwordIsSafe","alert","register","regex","test","UserIconComponent","UserChatsViewComponent","FriendRequestComponent","acceptFriendRequest","declineFriendRequest","acceptRequest","declineRequest","UserFriendsViewComponent","UserPageComponent","friendIds","friendReqIds","UserViewComponent","setProfileImage","requestForm","sendFriendRequestToEmail","sendFriendReq","BASE_URL","BASE_USER_URL","AuthenticationService","http","location","sessionStorage","getItem","clear","token","clearTokens","setItem","getToken","replaceState","window","reload","headers","append","body","post","res","status","accessToken","setAccessToken","go","setUserStatusOnline","get","providedIn","ChatCreateService","newChatUpdated","asObservable","global","tagToRemove","indexOfTag","splice","postTags","postCategory","next","CHAT_API","ChatService","chatUpdated","initServerSocket","socket","initClientSocket","query","updateChat","_this","on","emit","getIndexOfUserId","cur","imageUrl","ChatsService","chatsUpdated","selectedChatIdUpdated","updateChats","chatTags","chatCategory","updateSelectedChatId","TokenInterceptor","request","clone","setHeaders","authorization","handle","UserService","userUpdated","updateUser","userEmail","requestId","UsersService","usersUpdated","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\nimport { HomePageComponent } from './components/home-page/home-page.component'\nimport { LoginPageComponent } from './components/login-page/login-page.component'\nimport { RegisterPageComponent } from \"./components/register-page/register-page.component\"\nimport { GlobalChatComponent } from './components/chat-page/global-chat/global-chat.component'\nimport { CreateChatComponent } from \"./components/create-chat/create-chat.component\"\nimport { UserPageComponent } from \"./components/user-page/user-page.component\"\n\nconst routes: Routes = [\n  { path: \"\", component: HomePageComponent },\n  { path: \"api/authentication/login\", component: LoginPageComponent },\n  { path: \"api/authentication/register\", component: RegisterPageComponent },\n  { path: \"api/chat/view/:id\", component: GlobalChatComponent },\n  { path: \"api/chat/chat-create\", component: CreateChatComponent },\n  { path: \"api/user\", component: UserPageComponent },\n  { path: \"**\", redirectTo: \"\", component: HomePageComponent }\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent {\n  title = 'messenger-app';\n}","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser'\nimport { NgModule } from '@angular/core'\nimport { AppRoutingModule } from './app-routing.module'\nimport { HttpClientModule } from '@angular/common/http'\nimport { MatInputModule } from '@angular/material/input'\nimport { MatToolbarModule } from \"@angular/material/toolbar\"\nimport { MatCardModule } from '@angular/material/card'\nimport { FormsModule } from \"@angular/forms\"\nimport { FlexLayoutModule } from \"@angular/flex-layout\"\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { MatSidenavModule } from '@angular/material/sidenav'\nimport { MatButtonModule } from '@angular/material/button'\nimport { MatIconModule } from '@angular/material/icon'\nimport { MatSelectModule } from '@angular/material/select'\nimport { MatDialogModule } from \"@angular/material/dialog\"\nimport { HomePageComponent } from './components/home-page/home-page.component'\nimport { RegisterPageComponent } from \"./components/register-page/register-page.component\"\nimport { LoginPageComponent } from './components/login-page/login-page.component'\nimport { NavbarComponent } from './components/navbar/navbar.component'\nimport { AppComponent } from './app.component'\nimport { AuthenticationService } from './services/authentication'\nimport { UserService } from './services/user'\nimport { GlobalChatComponent } from './components/chat-page/global-chat/global-chat.component'\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\"\nimport { TokenInterceptor } from './services/token.interceptor'\nimport { MessageViewComponent } from './components/chat-page/message-view/message-view.component'\nimport { MessageCreateComponent } from './components/chat-page/message-view/message-create/message-create.component'\nimport { MessageReceivedComponent } from './components/chat-page/message-view/messages/message-received/message-received.component'\nimport { MessageSentComponent } from \"./components/chat-page/message-view/messages/message-sent/message-sent.component\"\nimport { CreateChatComponent } from \"./components/create-chat/create-chat.component\"\nimport { ChatDisplayComponent } from \"./components/home-page/chat-display/chat-display.component\"\nimport { UserPageComponent } from \"./components/user-page/user-page.component\"\nimport { UserIconComponent } from \"./components/user-icon/user-icon.component\"\nimport { ChatTitleComponent } from  \"./components/chat-page/message-view/chat-title/chat-title.component\"\nimport { ChatSubscribeComponent } from \"./components/chat-page/message-view/chat-title/chat-subscribe/chat-subscribe.component\"\nimport { SubscribersViewComponent } from \"./components/chat-page/subscribers-view/subscribers-view.component\"\nimport { MessagesComponent } from \"./components/chat-page/message-view/messages/messages.component\"\nimport { UserFriendsViewComponent } from \"./components/user-page/user-friends-view/user-friends-view.component\"\nimport { UserViewComponent } from \"./components/user-page/user-view/user-view.component\"\nimport { UserChatsViewComponent } from \"./components/user-page/user-chats-view/user-chats-view.component\"\nimport { ImageFabComponent } from \"./components/image-fab/image-fab.component\"\nimport { ChatTagsComponent } from \"./components/create-chat/chat-tags/chat-tags.component\"\nimport { TagComponent } from \"./components/create-chat/chat-tags/tag/tag.component\"\nimport { HeaderComponent } from \"./components/header/header.component\"\nimport { SubscriberComponent } from \"./components/chat-page/subscribers-view/subscriber/subscriber.component\"\nimport { ChatSelectionComponent } from './components/chat-selection/chat-selection'\nimport { ChatOptionComponent } from './components/chat-selection/chat-option/chat-option'\nimport { RecentChatsComponent } from './components/home-page/recent-chats/recent-chats.component'\nimport { PopularChatsComponent } from './components/home-page/popular-chats/popular-chats.component'\nimport { RecommendedChatsComponent } from './components/home-page/recommended-chats/recommended-chats.component'\nimport { ChatSubscribeAdminDialogComponent } from \"./components/chat-page/message-view/chat-title/chat-subscribe/chat-subscribe-admin-dialog/chat-subscribe-admin-dialog.component\"\nimport { ChatIconComponent } from \"./components/chat-icon/chat-icon.component\"\nimport { FriendRequestComponent } from \"./components/user-page/user-friends-view/friend-request/friend-request.component\"\nimport { RelatedChatsComponent } from \"./components/chat-page/global-chat/related-chats/related-chats.component\"\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomePageComponent,\n    LoginPageComponent,\n    RegisterPageComponent,\n    NavbarComponent,\n    MessageViewComponent,\n    MessageCreateComponent,\n    MessageReceivedComponent,\n    MessageSentComponent,\n    GlobalChatComponent,\n    CreateChatComponent,\n    ChatDisplayComponent,\n    UserPageComponent,\n    UserIconComponent,\n    ChatTitleComponent,\n    ChatSubscribeComponent,\n    SubscribersViewComponent,\n    MessagesComponent,\n    UserFriendsViewComponent,\n    UserViewComponent,\n    UserChatsViewComponent,\n    ImageFabComponent,\n    ChatTagsComponent,\n    TagComponent,\n    HeaderComponent,\n    SubscriberComponent,\n    ChatSelectionComponent,\n    ChatOptionComponent,\n    RecentChatsComponent,\n    PopularChatsComponent,\n    RecommendedChatsComponent,\n    ChatSubscribeAdminDialogComponent,\n    ChatIconComponent,\n    FriendRequestComponent,\n    RelatedChatsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    MatCardModule,\n    MatInputModule,\n    MatToolbarModule,\n    FormsModule,\n    FlexLayoutModule,\n    BrowserAnimationsModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSelectModule,\n    MatDialogModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    },\n    AuthenticationService,\n    UserService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from \"@angular/core\"\n\n@Component({\n        selector: \"app-chat-icon\",\n        templateUrl: \"chat-icon.component.html\",\n        styleUrls: [\"chat-icon.component.css\"]\n})\nexport class ChatIconComponent {}","<div class=\"icon-button\"></div>","import { Component, OnInit } from '@angular/core'\nimport { ChatService } from 'src/app/services/chat';\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { UsersService } from 'src/app/services/users';\nimport { Subscription } from 'rxjs';\nimport { Chat } from \"../../../models/chat\"\n\n\n@Component({\n  selector: \"app-global-chat\",\n  templateUrl: \"global-chat.component.html\",\n  styleUrls: [\"global-chat.component.css\"],\n  providers: [ChatService, UsersService]\n})\nexport class GlobalChatComponent {\n  chatId: string\n  chatSub: Subscription\n  constructor(\n    private chatService: ChatService, \n    private route: ActivatedRoute, \n    private usersService: UsersService,\n    private router: Router\n  ) {\n    //Reloads when params change \n    this.router.routeReuseStrategy.shouldReuseRoute = \n      () => false\n  }\n\n  ngOnInit() {\n    //Set chatId from router link id\n    this.route.params\n      .subscribe(params => {\n        this.chatId = params[\"id\"]\n        this.chatService.initChatService(this.chatId)\n        this.chatService.getChat()\n        this.chatSub = this.chatService.getChatUpdated()\n          .subscribe((chat: Chat) => {\n            if (this.usersService.users === null || this.usersService.users === undefined) {\n              var userIds = []\n              for (var i = 0; i < chat.subs.length; i++) {\n                const userId = chat.subs[i]\n                if (userIds.indexOf(userId) === -1 && !this.usersService.getUserSub(userId)) {\n                  userIds.push(userId)\n                }\n              }\n              for (var i = 0; i < chat.messages.length; i++) {\n                const userId = chat.messages[i].senderId\n                if (userIds.indexOf(userId) === -1 && !this.usersService.getUserSub(userId)) {\n                  userIds.push(userId)\n                }\n              }\n              this.usersService.getUsers(userIds)\n            }\n          })\n      })\n  }\n}\n","<app-navbar style=\"margin: auto; max-width: 2000px;\">\n        <div class=\"left\">\n                <app-related-chats></app-related-chats>\n        </div>\n        <div class=\"middle\">\n                <app-message-view></app-message-view>\n        </div>\n        <div class=\"right\">\n                <app-subscribers-view></app-subscribers-view>\n        </div>\n</app-navbar>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { ChatsService } from \"../../../../services/chats\"\nimport { ChatService } from \"../../../../services/chat\"\nimport { Subscription } from \"rxjs\"\n\n@Component({\n        selector: \"app-related-chats\",\n        templateUrl: \"related-chats.component.html\",\n        styleUrls: [\"related-chats.component.css\"],\n        providers: [ChatsService]\n})\nexport class RelatedChatsComponent implements OnInit, OnDestroy {\n        chatIds: string[] = []\n        chatSub: Subscription\n        constructor(private chatsService: ChatsService, private chatService: ChatService) {}\n\n        ngOnInit() {\n                this.chatSub = this.chatService.getChatUpdated()\n                        .subscribe((chat) => {\n                                if (this.chatsService.chats !== undefined) return\n                                this.chatsService.getRelatedChatIds(chat.tags, chat.category, chat._id)\n                                        .then((chatIds: string[]) => {\n                                                this.chatIds = chatIds\n                                                this.chatsService.getChats(chatIds)\n                                        })\n                        })\n                this.chatService.getChat()\n        }\n\n        //Avoid memory leaks\n        ngOnDestroy() {\n                this.chatSub.unsubscribe()\n        }\n        \n}","<div class=\"container\">\n        <app-header \n                [headerText]=\"'Related Chats'\" \n                [imageUrl]=\"'../../../assets/images/Related2.png'\"\n        ></app-header>\n        <div class=\"chat-selection-container\">\n                <app-chat-selection \n                        [chatIds]=\"this.chatIds\"\n                        [color]=\"'rgb(173, 243, 250)'\"\n                ></app-chat-selection>\n        </div>\n</div>","import { Component, Inject } from \"@angular/core\"\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog'\nimport { ChatService } from 'src/app/services/chat'\nimport { DialogData } from \"./dialog-data\"\n\n@Component({\n        selector: 'app-chat-subscribe-admin-dialog',\n        templateUrl: 'chat-subscribe-admin-dialog.component.html',\n        styleUrls: [\"chat-subscribe-admin-dialog.component.css\"]\n})\nexport class ChatSubscribeAdminDialogComponent {\n        selectedImage\n        selectedImageUrl\n        constructor(\n                public dialogRef: MatDialogRef<ChatSubscribeAdminDialogComponent>, \n                private chatService: ChatService,\n                @Inject(MAT_DIALOG_DATA) public data: DialogData\n        ) {}\n        \n        onExit() {\n                this.dialogRef.close();\n        }\n\n       //Sets the selected image to the image selected by the user\n       onImageSelected(event) {\n                this.selectedImage = event.target.files[0]\n                const reader = new FileReader()\n                reader.readAsDataURL(this.selectedImage)\n                reader.onload = () => {\n                        const originalDataUrl = reader.result\n                        //Scaled the image down to a 400 X 400 square\n                        this.scaleImage(originalDataUrl, 400, 400, this.selectedImage.type, 0.7, (dataUrl) => {\n                                this.selectedImageUrl = dataUrl\n                        })\n                }\n        }\n\n        //https://codepen.io/shrinivas93/pen/xdLLPN\n        scaleImage(dataUrl, newWidth: number, newHeight: number, imageType: string, imageArguments: number, callback) {\n                imageType = imageType || \"image/jpeg\";\n                imageArguments = imageArguments || 0.7;\n                const image = new Image();\n                image.onload = function() {\n                        const canvas = document.createElement(\"canvas\");\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        const ctx = canvas.getContext(\"2d\");\n                        ctx.drawImage(image, 0, 0, newWidth, newHeight);\n                        const newDataUrl = canvas.toDataURL(imageType, imageArguments);\n                        callback(newDataUrl);\n                }\n                image.src = dataUrl;\n        }\n\n        //Uploads image\n        uploadImage() {\n                if (this.selectedImageUrl === undefined || this.selectedImageUrl === null) return\n                this.chatService.setChatId(this.data.chatId)\n                this.chatService.setChatImage(this.selectedImageUrl)\n                this.dialogRef.close()\n        }\n\n}","<h1 mat-dialog-title>Upload chat image</h1>\n<div mat-dialog-content>\n        <p>Select image</p>\n        <input type=\"file\"\n                accept=\"image/*\"\n                (change)=\"onImageSelected($event)\"\n        >\n</div>\n<div mat-dialog-actions>\n        <button mat-button (click)=\"onExit()\" class=\"dialog-button\">Exit</button>\n        <button mat-button *ngIf=\"this.selectedImage != null && this.selectedImage != undefined\" (click)=\"uploadImage()\">\n                Upload\n        </button>\n</div>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { ChatService } from \"../../../../../services/chat\"\nimport { AuthenticationService } from \"../../../../../services/authentication\"\nimport { UserService } from \"../../../../../services/user\"\nimport { Subscription } from \"rxjs\"\nimport { User } from \"../../../../../models/user\"\nimport { ChatSub } from 'src/app/models/chat-sub'\nimport { UsersService } from 'src/app/services/users'\nimport { UserSub } from \"../../../../../models/user-sub\"\nimport { ChatSubscribeAdminDialogComponent } from \"../chat-subscribe/chat-subscribe-admin-dialog/chat-subscribe-admin-dialog.component\"\nimport { MatDialog } from \"@angular/material/dialog\"\n\n@Component({\n        selector: \"app-chat-subscribe\",\n        templateUrl: \"chat-subscribe.component.html\",\n        styleUrls: [\"chat-subscribe.component.css\"]\n})\nexport class ChatSubscribeComponent {\n        user: User\n        userSub: Subscription\n        subscribing: boolean = false\n        constructor(\n                private chatService: ChatService, \n                private authService: AuthenticationService, \n                private userService: UserService, \n                private usersService: UsersService,\n                private dialog: MatDialog\n        ) {}\n\n        //Initializes user object and user subscription\n        ngOnInit() {\n                this.userSub = this.userService.getUserUpdated()\n                        .subscribe( user => {\n                                this.user = user\n                        })\n                this.userService.getUser()\n        }\n\n        isAdmin() {\n                if (this.user === undefined || this.user === null) return false\n                return this.chatService.isAdmin(this.user._id)\n        }\n\n        //Subscribes user to chat if the user is logged in and has not yet subscribed\n        subscribe() {\n                if (this.subscribing) return\n                this.subscribing = true\n                this.chatService.subscribeToChat().then(\n                        () =>  {\n                                if (this.usersService.getUserSub(this.user._id) === null || this.usersService.getUserSub(this.user._id) === undefined) {\n                                this.usersService.getUser(this.user._id)\n                                        .then( (userSub: UserSub ) => {\n                                                this.usersService.users.push(userSub)\n                                                this.usersService.updateUsers()\n                                        })\n                                }\n                                this.userService.getUser(true)\n                                this.subscribing = false\n                        }\n                ).catch((reject) => console.log(reject))\n        }\n\n        //Unsubscribes user from chat if the user is logged in and is already subscribed\n        unsubscribe() {\n                this.chatService.unsubscribeFromChat().then(\n                        () => this.userService.getUser(true)\n                ).catch((reject) => console.log(reject))\n        }\n\n        //Checks if user has logged in \n        isAuthenticated() {\n                return this.authService.isAuthenticated()\n        }\n\n        //Checks if user is subscribed to the chat\n        isSubscribed() {\n                if (this.chatService.chatId === undefined || this.chatService.chatId === null || this.user === null || this.user === undefined) return false\n                const chat: ChatSub = this.chatService.getChatSub()\n                for (var i = 0; i < this.user.chatIds.length; i++) {\n                        if (this.user.chatIds[i] === chat._id) {\n                                return true\n                        }\n                }\n                return false\n        }\n\n        openDialog() {\n                const dialogRef = this.dialog.open(ChatSubscribeAdminDialogComponent, {\n                        width: '250px',\n                        data: { chatId: this.chatService.chatId }\n                })\n                dialogRef.afterClosed()\n                        .subscribe(() => {\n                                this.chatService.getChat(true)\n                        })\n        }\n\n        //Avoid memory leaks\n        ngOnDestroy() {\n                this.userSub.unsubscribe()\n        }\n}","<div class=\"container transform-height\" *ngIf=\"this.isAuthenticated()\">\n        <div class=\"admin-container transform-background-color\" *ngIf=\"this.isAdmin()\" (click)=\"openDialog()\">\n                <div class=\"admin-text transform-color\">\n                        Admin\n                </div>\n        </div>\n        <div class=\"subscribe-button-container transform-background-color\" *ngIf=\"!this.isSubscribed()\" (click)=\"this.subscribe()\">\n                <div class=\"subscribe-button transform-color\">\n                        Join\n                </div>\n        </div>\n        <div class=\"subscribed-button-container transform-background-color\" *ngIf=\"this.isSubscribed() && !this.isAdmin()\" (click)=\"this.unsubscribe()\">\n                <div class=\"subscribed-button transform-color\">\n                        Joined\n                </div>\n        </div>\n</div>","import { Component } from \"@angular/core\"\nimport { Subscription } from 'rxjs'\nimport { Chat } from 'src/app/models/chat'\nimport { ChatService } from \"../../../../services/chat\"\nimport { ChatsService } from \"../../../../services/chats\"\n\n@Component({\n        selector: \"app-chat-title\",\n        templateUrl: \"chat-title.component.html\",\n        styleUrls: [\"chat-title.component.css\"]\n})\nexport class ChatTitleComponent {\n        chatSub: Subscription\n        chat: Chat\n        constructor(private chatService: ChatService, public chatsService: ChatsService) {}\n\n        ngOnInit() {\n                this.chatSub = this.chatService.getChatUpdated()\n                        .subscribe(chat => {\n                                this.chat = chat\n                        })\n                this.chatService.getChat()\n        }    \n\n        ngOnDestroy() {\n                this.chatSub.unsubscribe()\n        }    \n}","<div class=\"container\">\n        <div class=\"icon-container\">\n                <app-image-fab \n                        *ngIf=\"(this.chat !== undefined && this.chat !== null) && this.chat.image !== '$$$Default$$$'\" \n                        [imageUrl]=\"this.chat.image\" \n                        [showStatus]=\"false\"\n                ></app-image-fab>\n                <app-chat-icon \n                        *ngIf=\"this.chat === undefined || this.chat === null ||this.chat.image === '$$$Default$$$'\" \n                ></app-chat-icon>\n        </div>\n        <div class=\"title-container\">\n                <div class=\"title\"  *ngIf=\"this.chat !== undefined && this.chat !== null\">\n                        {{this.chat.title}}\n                </div>\n                <div class=\"title\" *ngIf=\"this.chat === undefined || this.chat === null\">\n                        Loading...\n                </div>\n                <div class=\"tags-container\" *ngIf=\"this.chat !== undefined && this.chat !== null\">\n                        <div class=\"tag-container\" *ngFor=\"let tag of this.chat.tags\">\n                                {{tag}}\n                        </div>\n                </div>\n        </div>\n        <span class=\"flex-expand\"></span>\n        <div class=\"chat-subscribe-container\" *ngIf=\"this.chatsService.selectedChatId === undefined\">\n                <app-chat-subscribe></app-chat-subscribe>\n        </div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core'\nimport { ChatService } from '../../../../services/chat'\nimport { AuthenticationService } from \"../../../../services/authentication\"\nimport { UserService } from '../../../../services/user'\nimport { User } from '../../../../models/user'\nimport { Subscription } from 'rxjs'\nimport { NgForm } from '@angular/forms'\nimport { UsersService } from 'src/app/services/users'\nimport { UserSub } from 'src/app/models/user-sub'\n\n@Component({\n  selector: \"app-message-create\",\n  templateUrl: \"message-create.component.html\",\n  styleUrls: [\"message-create.component.css\"]\n})\nexport class MessageCreateComponent {\n  user: User\n  userSub: Subscription\n  constructor(private userService: UserService, private chatService: ChatService, private authService: AuthenticationService, private usersService: UsersService) {}\n\n  //Initializes link to UserService user\n  ngOnInit() {\n    this.userSub = this.userService.getUserUpdated()\n      .subscribe(user => {\n        this.user = user\n      })\n    this.userService.getUser()\n  }\n\n  //Requests message post to database\n  postMessage(messageForm: NgForm) {\n    const message = messageForm.value.message.trim()\n    if (message == \"\" || message == null || message == undefined) {return}\n    let timestamp = new Date().getTime()\n    this.chatService.postMessage(message, this.user._id, timestamp)\n    if (this.usersService.getUserSub(this.user._id) === null || this.usersService.getUserSub(this.user._id) === undefined) {\n      this.usersService.getUser(this.user._id)\n        .then( (userSub: UserSub ) => {\n          this.usersService.users.push(userSub)\n          this.usersService.updateUsers()\n        })\n    }\n    messageForm.resetForm()\n  }\n\n  //Check if user is authenticated\n  isAuthenticated() {\n    return this.authService.isAuthenticated()\n  }\n\n  //Avoid memory leaks\n  ngOnDestroy() {\n    this.userSub.unsubscribe()\n  }\n\n}\n","<div *ngIf=\"isAuthenticated()\"  class=\"container-one\">\n  <div class=\"container-two\">\n      <form #messageForm=\"ngForm\" (submit)=\"postMessage(messageForm)\" class=\"message-form\">\n        <!-- Message Field -->\n        <div class=\"message-field-container\">\n          <input\n            matInput\n            type=\"text\"\n            name=\"message\"\n            ngModel\n            placeholder=\"message\"\n            #message=\"ngModel\"\n            class=\"message-field\"\n            autocomplete=\"off\" \n          >\n          <!-- ?mat-form-field? -->\n        </div>\n        <div class=\"form-submit-container\">\n            <button mat-raised-button type=\"submit\" class=\"form-submit\">\n              Send\n            </button>\n        </div>\n      </form>\n  </div>\n</div>\n<div *ngIf=\"!isAuthenticated()\" class=\"placeholder\">\n  <p [routerLink]=\"'/api/authentication/login'\" class=\"placeholder-text login\">login</p>\n  <p class=\"placeholder-text\">or</p>\n  <p [routerLink]=\"'/api/authentication/register'\" class=\"placeholder-text register\">register</p>\n  <p class=\"placeholder-text\">to send messages</p>\n\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core'\nimport { UserService } from '../../../services/user'\nimport { User } from 'src/app/models/user'\nimport { Subscription } from 'rxjs'\nimport { Chat } from 'src/app/models/chat'\nimport { ChatService } from \"../../../services/chat\"\n\n@Component({\n  selector: \"app-message-view\",\n  templateUrl: \"message-view.component.html\",\n  styleUrls: [\"message-view.component.css\"]\n})\nexport class MessageViewComponent {\n  chat: Chat\n  chatSub: Subscription\n  user: User\n  userSub: Subscription\n\n  constructor(private userService: UserService, private chatService: ChatService) {}\n\n  //Keeping the user object updated\n  ngOnInit() {\n    //Creates link to UserService user\n    this.userSub = this.userService.getUserUpdated()\n      .subscribe(user => {\n        this.user = user\n      })\n    this.userService.getUser()\n    //Creates link to ChatService chat\n    this.chatSub = this.chatService.getChatUpdated()\n      .subscribe(chat => this.chat = chat)\n    this.chatService.getChat()\n  }\n\n  \n\n  //Avoid memory leak\n  ngOnDestroy() {\n    this.userSub.unsubscribe()\n    this.chatSub.unsubscribe()\n  }\n}\n","<div class=\"view-background\">\n  <app-chat-title *ngIf=\"this.chat != undefined && this.chat != null\"></app-chat-title>\n  <app-messages></app-messages>\n  <app-message-create></app-message-create>\n</div>\n\n","import { Component, Input, OnInit } from '@angular/core'\nimport { UsersService } from \"../../../../../services/users\"\nimport { UserSub } from 'src/app/models/user-sub'\n\n@Component({\n  selector: \"app-message-received\",\n  templateUrl: \"message-received.component.html\",\n  styleUrls: [\"message-received.component.css\"]\n})\nexport class MessageReceivedComponent implements OnInit {\n  @Input() senderId: string\n  @Input() timestamp: number\n  userSub: UserSub = {\n    _id: \"----\",\n    username: \"loading...\",\n    image: \"$$$Default$$$\",\n    online: false\n  }\n\n  constructor(private usersService: UsersService) {}\n\n  ngOnInit() {\n    this.getUser()\n  }\n\n  getUser() {\n    if (this.usersService.getUserSub(this.senderId)) {\n      this.userSub = this.usersService.getUserSub(this.senderId)\n    }\n  }\n\n  getTime(timestampMil: number) {\n    const timestamp = new Date()\n    //Converts the timestamp from milliseconds to the clients local time\n    timestamp.setTime(timestampMil)\n    //Raw Time \n    const rawTime = timestamp.toLocaleTimeString()\n    const time = this.parseRawTime(rawTime)\n    const rawDate = timestamp.toDateString()\n    const date = this.parseRawDate(rawDate)\n    return time + \" \" + date\n  }\n\n  //Format HH:MM:SS (AM/PM) -> HH:MM (AM/PM)\n  parseRawTime(rawTime: string) {\n    const splitTime = rawTime.split(\":\")\n    const time = splitTime[0] + \":\" + splitTime[1] + splitTime[2].split(\" \")[1].toLowerCase()\n    return time\n  }\n\n  //Format WEEKDAY MON DAY YEAR -> MON DAY\n  parseRawDate(rawDate: string) {\n    if (rawDate === new Date().toDateString()) return \"Today\"\n    const dateSplit = rawDate.split(\" \")\n    var date = dateSplit[1] + \" \" + dateSplit[2]\n    if (dateSplit[2].length === 2) {\n      if (dateSplit[2][1] === '1') date += \"st\"\n      else if (dateSplit[2][1] === '2') date += \"nd\"\n      else if (dateSplit[2][1] === '3') date += \"rd\"\n      else date += \"th\"\n    } else {\n      if (dateSplit[2] === \"1\") date += \"st\"\n      else if (dateSplit[2] === \"2\") date += \"nd\"\n      else if (dateSplit[2] === \"3\") date += \"rd\"\n      else date += \"th\"\n    }\n    return date\n  }\n}\n","<div class=\"container\">\n  <div class=\"user-icon-container\">\n    <div class=\"user-icon\">\n      <app-image-fab *ngIf=\"this.userSub.image != '$$$Default$$$'\" [imageUrl]=\"this.userSub.image\" [showStatus]=\"false\"></app-image-fab>\n      <app-user-icon *ngIf=\"this.userSub.image === '$$$Default$$$'\" [showStatus]=\"false\"></app-user-icon>\n    </div>\n  </div>\n  <div class=\"message-container\">\n    <div class=\"message-header-container\">\n      <div class=\"username\">{{this.userSub.username}}</div>\n      <!-- Timestamp -->\n      <div class=\"timestamp\">{{this.getTime(this.timestamp)}}</div>\n    </div>\n    <!-- Text -->\n    <div class=\"message-body-container\">\n        <span class=\"message-text\"><ng-content></ng-content></span>\n    </div>\n  </div>\n</div>\n","import { Component, Input} from '@angular/core'\n\n@Component({\n  selector: \"app-message-sent\",\n  templateUrl: \"message-sent.component.html\",\n  styleUrls: [\"message-sent.component.css\"]\n})\nexport class MessageSentComponent {\n  @Input() senderUsername\n}\n","<div class=\"container\">\n  <div class=\"message-container\">\n    <div class=\"message-header-container\">\n        <div class=\"username\">{{this.senderUsername}}</div>\n        <!-- Timestamp -->\n    </div>\n    <!-- Text -->\n    <div class=\"message-body-container\">\n        <p class=\"message-text\"><ng-content></ng-content></p>\n    </div>\n  </div>\n  <div class=\"user-icon-container\">\n    <div class=\"user-icon\">\n        <app-user-icon></app-user-icon>\n    </div>\n  </div>\n</div>\n  ","import { Component, OnInit, OnDestroy, ElementRef, ViewChild, AfterViewChecked } from \"@angular/core\"\nimport { ChatService } from \"../../../../services/chat\"\nimport { UserService } from \"../../../../services/user\"\nimport { Message } from \"../../../../models/message\"\nimport { Chat } from \"../../../../models/chat\"\nimport { User } from \"../../../../models/user\"\nimport { Subscription } from \"rxjs\"\n\n@Component({\n        selector: \"app-messages\",\n        templateUrl: \"messages.component.html\",\n        styleUrls: [\"messages.component.css\"]\n})\nexport class MessagesComponent {\n        @ViewChild(\"messages\") private messageContainer: ElementRef\n        chat: Chat\n        chatSub: Subscription\n        user: User\n        userSub: Subscription\n\n        constructor(private userService: UserService, private chatService: ChatService) {}\n\n        //Keeping the user object updated\n        ngOnInit() {\n                //Scrolls to most recent messages\n                this.scrollToBottom();\n                //Creates link to UserService user\n                this.userSub = this.userService.getUserUpdated()\n                        .subscribe(user => {\n                                this.user = user\n                        })\n                this.userService.getUser()\n                \n                //Creates link to ChatService chat\n                this.chatSub = this.chatService.getChatUpdated()\n                        .subscribe(chat => {\n                                this.chat = chat\n                                this.scrollToBottom()\n                        })\n                this.chatService.getChat()\n        }\n\n        ngAfterViewChecked() {\n                this.scrollToBottom()\n        }\n\n        //Compresses messages\n        compressMessages(messages: Message[]) : Message[] {\n                if (messages === undefined || messages === null || messages.length == 0) return []\n                var compressedMessages: Message[] = [{...messages[0]}]\n                for (var i = 1; i < messages.length; i++) {\n                        var len = compressedMessages.length\n                        if (messages[i].senderId == compressedMessages[len-1].senderId) {\n                                compressedMessages[len-1].text = compressedMessages[len-1].text\n                                        .concat(\"\\n\", messages[i].text)\n                        } else {\n                                compressedMessages.push({...messages[i]})\n                        }\n                }\n                return compressedMessages\n        }\n\n        //Checks if logged in user sent the message\n        sent(message: Message) : boolean {\n                //Checks if user exists\n                if (this.user == undefined || this.user == null) return false\n                return message.senderId == this.user._id\n        }\n                \n        //Checks if logged in user received the message\n        received(message: Message) : boolean {\n                return !this.sent(message)\n        }\n\n        //Scroll to most recent messages\n        scrollToBottom() {\n                try {\n                        var currentPos = this.messageContainer.nativeElement.scrollHeight\n                        this.messageContainer.nativeElement.scrollTop = currentPos\n                } catch(err) {}\n        }\n\n        //Avoid memory leak\n        ngOnDestroy() {\n                this.userSub.unsubscribe()\n                this.chatSub.unsubscribe()\n        }\n}\n","<div #messages *ngIf=\"this.chat != undefined && this.chat != null\" class=\"messages\">\n        <div *ngFor=\"let message of compressMessages(chat.messages)\">\n                <app-message-received [senderId]=\"message.senderId\" [timestamp]=\"message.timestamp\"> \n                        {{message.text}}\n                </app-message-received>\n                <div class=\"spacer invisible\"></div>\n        </div>\n</div>","import { Component, Input } from \"@angular/core\"\n\n@Component({\n        selector: \"app-subscriber\",\n        templateUrl: \"subscriber.component.html\",\n        styleUrls: [\"subscriber.component.css\"]\n})\nexport class SubscriberComponent {\n        @Input() username: string = \"loading...\"\n        @Input() online: boolean = false\n        @Input() image: string = \"$$$Default$$$\"\n        @Input() adminId: string = \"--admin--\"\n        @Input() subId: string = \"--user--\"\n}","<div class=\"subscriber-container\" *ngIf=\"this.subId !== this.adminId\">\n        <div class=\"subscriber-icon-container\">\n                <app-image-fab *ngIf=\"this.image != '$$$Default$$$'\" [imageUrl]=\"this.image\" [showStatus]=\"true\" [online]=\"this.online\"></app-image-fab>\n                <app-user-icon *ngIf=\"this.image === '$$$Default$$$'\" [showStatus]=\"true\" [online]=\"this.online\"></app-user-icon>\n        </div>\n        <div class=\"subscriber-username-container\">\n                <div class=\"subscriber-username\">\n                        {{this.username}}\n                </div>\n        </div>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { ChatService } from \"../../../services/chat\"\nimport { Chat } from 'src/app/models/chat'\nimport { Subscription } from 'rxjs'\nimport { UsersService } from 'src/app/services/users'\n\n@Component({\n        selector: \"app-subscribers-view\",\n        templateUrl: \"subscribers-view.component.html\",\n        styleUrls: [\"subscribers-view.component.css\"]\n})\nexport class SubscribersViewComponent implements OnInit, OnDestroy {\n        chat: Chat\n        chatSub: Subscription\n        constructor(private chatService: ChatService, private usersService: UsersService) {}\n\n        //Initialize chat object\n        ngOnInit() {\n                this.chatSub = this.chatService.getChatUpdated()\n                        .subscribe(chat => {\n                                this.chat = chat\n                                // console.log(\"List of subs updated \\n Sub count: \" + this.chat.subs.length)\n                        })\n                this.chatService.getChat()\n        }\n\n        getUserSub(subId: string) {\n                if (this.usersService.getUserSub(subId)) {\n                        return this.usersService.getUserSub(subId)\n                }\n                return {\n                        _id: \"-----\",\n                        username: \"loading...\",\n                        image: \"$$$Default$$$\",\n                        online: false\n                }\n        }\n\n        //Avoid memory leaks\n        ngOnDestroy() {\n                this.chatSub.unsubscribe()\n        }\n}\n\n","<app-header \n        [headerText]=\"'Admin'\" \n        [imageUrl]=\"'../../../assets/images/Admin2.png'\"\n></app-header>\n<app-subscriber \n        *ngIf=\"this.chat !== undefined && this.chat !== null\"\n        [username]=\"this.getUserSub(this.chat.adminId).username\" \n        [image]=\"this.getUserSub(this.chat.adminId).image\" \n        [online]=\"this.getUserSub(this.chat.adminId).online\" \n        [subId]=\"'------'\"\n></app-subscriber>\n\n<app-header \n        [headerText]=\"'Subscribers'\" \n        *ngIf=\"this.chat !== undefined && this.chat !== null && this.chat.subs.length > 0\" \n        [imageUrl]=\"'../../../assets/images/SubTwo.png'\"\n></app-header>\n<div *ngIf=\"this.chat\" class=\"subscribers-view-container\">\n        <app-subscriber \n                *ngFor=\"let subId of this.chat.subs\" \n                [adminId]=\"this.chat.adminId\" \n                [username]=\"this.getUserSub(subId).username\" \n                [image]=\"this.getUserSub(subId).image\" \n                [online]=\"this.getUserSub(subId).online\" \n                [subId]=\"subId\"\n        ></app-subscriber>\n</div>","import { Component, Input, AfterContentInit, ElementRef, ViewChild, AfterViewInit } from \"@angular/core\"\nimport { ChatsService } from 'src/app/services/chats'\nimport { trigger, state, style, animate, transition } from '@angular/animations';\n\n@Component({\n        selector: \"app-chat-option\",\n        animations: [\n                trigger('expansionBox', [\n                        state('open', style({\n                                backgroundColor: \"rgb(30, 40, 50)\",\n                                height: \"90px\",\n                                borderRadius: \"5px\",\n                                width: \"100%\",\n                                marginBottom: \"5px\",\n                                marginTop: \"5px\"\n                        })),\n                        state('closed', style({\n                                // backgroundColor: \"rgb(38, 49, 54)\",\n                                height: \"40px\",\n                                borderRadius: \"0px\",\n                                width: \"100%\"\n                        })),\n                                transition('open => closed', [\n                                        animate('0.1s')\n                        ]),\n                                transition('closed => open', [\n                                        animate('0.2s')\n                        ]),\n                ])\n        ],\n        templateUrl: \"chat-option.html\",\n        styleUrls: [\"chat-option.css\"]\n})\nexport class ChatOptionComponent {\n        @Input() chatId: string\n        @Input(\"color\") color: string\n        @ViewChild(\"chatTitle\") chatTitle: ElementRef\n        expanded = false;\n        constructor(private chatsService: ChatsService) {}\n\n        // ngAfterViewInit() {\n        //         this.chatTitle.nativeElement.style.color = this.color\n        // }\n\n        //Get chat sub\n        getChatSub() {\n                if (this.chatsService.getChatSub(this.chatId)) {\n                        return this.chatsService.getChatSub(this.chatId)\n                }\n                return {\n                        _id: \"-----\",\n                        title: \"loading...\",\n                        image: \"$$$Default$$$\",\n                        tags: [],\n                        subCount: 0\n                }\n        }\n\n        //Sets the selected chat id for the chat display\n        setAsSelectedChat() {\n                this.chatsService.setSelectedChatId(this.chatId)\n        }\n\n        //Change expand\n        toggle() {\n                this.expanded = !this.expanded\n                if (this.expanded) {\n                        this.setAsSelectedChat()\n                }\n        }\n}","<!-- Placeholder text -->\n<div [@expansionBox]=\"expanded ? 'open' : 'closed'\" (click)=\"this.toggle()\" class=\"container transform-background-color\">\n        <div class=\"top-container\">\n                <div class=\"icon-container\">\n                        <app-image-fab \n                                *ngIf=\"this.getChatSub().image != '$$$Default$$$'\" \n                                [imageUrl]=\"this.getChatSub().image\" \n                                [showStatus]=\"false\"\n                        ></app-image-fab>\n                        <app-chat-icon \n                                *ngIf=\"this.getChatSub().image === '$$$Default$$$'\" \n                        ></app-chat-icon>\n                </div>\n                <div class=\"title-container\">\n                <div class=\"title no-select transform-font-size transform-color\" [style]=\"'color:' + this.color + ';'\" *ngIf=\"!this.expanded\" #chatTitle>\n                                {{this.getChatSub().title}}\n                        </div>\n                        <div class=\"title-expanded no-select\" *ngIf=\"this.expanded\">\n                                {{this.getChatSub().title}}\n                        </div>\n                </div>\n        </div>\n        <div class=\"bottom-container\" *ngIf=\"this.expanded\">\n                <div class=\"bottom-bottom-container\">\n                        <div class=\"sub-count-container no-select\">\n                                {{'Sub Count: ' + this.getChatSub().subCount}}\n                        </div>\n                        <span class=\"flex-expand\"></span>\n                        <div class=\"go-button transform-opacity no-select\" [routerLink]=\"['/api/chat/view', this.chatId]\">\n                                Chat\n                        </div>\n                </div>\n                <div class=\"tags-container\">\n                        <div class=\"tag-container no-select transform-color\" *ngFor=\"let tag of this.getChatSub().tags\">\n                                {{tag}}\n                        </div>\n                </div>\n                \n        </div>\n\n</div>","import { Component, Input } from \"@angular/core\"\n\n@Component({\n        selector: \"app-chat-selection\",\n        templateUrl: \"chat-selection.html\",\n        styleUrls: [\"chat-selection.css\"]\n})\nexport class ChatSelectionComponent {\n        @Input() chatIds: string[]\n        @Input(\"color\") color: string = \"white\"\n}","<div class=\"container\">\n        <app-chat-option \n                *ngFor=\"let chatId of this.chatIds\" \n                [chatId]=\"this.chatId\"\n                [color]='this.color'\n        ></app-chat-option>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { NgForm } from '@angular/forms'\nimport { Chat } from 'src/app/models/chat'\nimport { Subscription } from 'rxjs'\nimport { ChatCreateService } from 'src/app/services/chat-create'\n\n@Component({\n        selector: \"app-chat-tags\",\n        templateUrl: \"chat-tags.component.html\",\n        styleUrls: [\"chat-tags.component.css\"]\n})\nexport class ChatTagsComponent implements OnInit, OnDestroy{\n        newChat: Chat\n        newChatSub: Subscription\n\n        constructor(private chatCreateService: ChatCreateService) {}\n\n        ngOnInit() {\n                this.newChatSub = this.chatCreateService.getNewChatUpdated()\n                        .subscribe(chat => { \n                                this.newChat = chat\n                        })\n                this.chatCreateService.updateNewChat()\n        }\n\n        //Adds a new tag to the list of tags\n        addTag(tagForm: NgForm) {\n                const newTag = this.fixTag(tagForm\n                                .value\n                                .tag\n                                .trim()\n                                .toLowerCase()\n                        )\n                        .split(/\\s+/g)\n                        .join('‑')\n                if (!(newTag === null || newTag === undefined || newTag === \"\" || newTag === \"new tag\")) {\n                        this.chatCreateService.addTag(newTag)\n                }\n                tagForm.resetForm()\n        }\n\n        //Replace underscores and hyphens with no breakable hyphen\n        fixTag(tag: string) {\n                for (var i = 0; i < tag.length; i++) {\n                        if (tag[i] === '_' || tag[i] === '-') {\n                                tag = this.replaceAt(tag, i, '‑')\n                        }\n                }\n                return tag\n        }\n\n        //Replace character at index\n        replaceAt(current: string, index: number, replacement: string) {\n                return current.substr(0, index) + replacement + current.substr(index + replacement.length);\n        }\n\n\n        updateOptions(queryText: string) {\n                // this.chatsService.getTags(queryText) \n        }\n\n        ngOnDestroy() {\n                this.newChatSub.unsubscribe()\n        }\n}","<div class=\"main-container\">\n        <div class=\"tags-container\">\n                <div class=\"tag-container\" *ngFor=\"let tag of newChat.tags\">\n                        <app-tag [tagText]=\"tag\"></app-tag>\n                </div>\n                <button class=\"add-tag-button tag-container no-select\" (click)=\"addTag(tagForm)\">+</button>\n                <form #tagForm=\"ngForm\" (submit)=\"addTag(tagForm)\">\n                        <div class=\"add-tag-input-container tag-container\">\n                                <input class=\"add-tag-input\" \n                                        type=\"text\"\n                                        matInput\n                                        name=\"tag\"\n                                        ngModel\n                                        #tag=\"ngModel\"\n                                        placeholder=\"tag\"\n                                        maxlength=\"25\"\n                                >\n                        </div>\n                </form> \n                \n        </div>\n</div>","import { Component, Input } from \"@angular/core\"\nimport { ChatCreateService } from 'src/app/services/chat-create'\n\n@Component({\n        selector: \"app-tag\",\n        templateUrl: \"tag.component.html\",\n        styleUrls: [\"tag.component.css\"]\n})\nexport class TagComponent {\n        @Input() tagText: string\n\n        constructor(private chatCreateService: ChatCreateService) {}\n\n        //Removes existing tag from this of tags\n        removeTag() {\n                this.chatCreateService.removeTag(this.tagText)\n        }\n\n}","<div class=\"container\">\n        <div class=\"text-container no-select\">\n                {{this.tagText}}\n        </div>\n        <div class=\"button-container no-select\" (click)=\"removeTag()\">\n                x\n        </div>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { NgForm } from '@angular/forms'\nimport { UserService } from \"../../services/user\"\nimport { User } from \"../../models/user\"\nimport { Subscription } from 'rxjs'\nimport { AuthenticationService } from 'src/app/services/authentication'\nimport { ChatCreateService } from 'src/app/services/chat-create'\n\n@Component({\n  selector: \"app-create-chat\",\n  templateUrl: \"create-chat.component.html\",\n  styleUrls: [\"create-chat.component.css\"],\n  providers: [ChatCreateService] \n})\nexport class CreateChatComponent implements OnInit, OnDestroy {\n  categories: String[] = [\n    \"Science and Tech\",\n    \"Food\",\n    \"Esports\"\n  ]\n  user: User;\n  userSub: Subscription\n  constructor(private chatCreateService: ChatCreateService, private userService: UserService, private authService: AuthenticationService) {}\n\n  ngOnInit() {\n    this.chatCreateService.initNewChat()\n    this.userSub = this.userService.getUserUpdated()\n      .subscribe(user => {\n        this.user = user\n      })\n    this.userService.getUser()\n  }\n\n  isAuthenticated() {\n    return this.authService.isAuthenticated()\n  }\n\n\n  createChat(chatForm: NgForm) {\n    if (!chatForm.invalid) {\n      //TODO: Handle case when the chat category has yet to be set\n      const title = chatForm.value.title\n      const category = chatForm.value.category\n      this.chatCreateService.postChat(title, this.user._id, category, true)\n      chatForm.resetForm()\n    }\n  }\n\n  //Avoid memory leaks\n  ngOnDestroy() {\n    this.userSub.unsubscribe()\n  }\n}\n","<div class=\"one-container\">\n  <div class=\"two-container\">\n    <div class=\"three-container\">\n      <form #chatForm=\"ngForm\" (submit)=\"createChat(chatForm)\">\n        <div class=\"chat-title-input-container\">\n          <input\n            type=\"text\"\n            matInput\n            name=\"title\"\n            ngModel\n            required\n            #title=\"ngModel\"\n            placeholder=\"title\"\n            maxlength=\"40\"\n            class=\"chat-title-input\"\n          >\n        </div>\n        <!-- Mat select for categories -->\n        <div class=\"category-select-container\">\n          <!-- This will replace the current select https://mdbootstrap.com/snippets/jquery/mdbootstrap/921549 -->\n            <mat-select placeholder=\"Select a Category\" ngModel #category=\"ngModel\" name=\"category\" class=\"category-select\">\n              <mat-option *ngFor=\"let category of categories\" class=\"category\" [value]=\"category\">\n                {{category}}\n              </mat-option>\n              <!-- </mat-option> -->\n            </mat-select>\n        </div>\n        <app-chat-tags style=\"order: 2;\"></app-chat-tags>\n        <div class=\"form-submit-container\">\n          <button mat-raised-button type=\"submit\" class=\"form-submit-button\">Create</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n\n","import { Component, Input, AfterViewInit, ElementRef, ViewChild } from \"@angular/core\";\n\n@Component({\n        selector: \"app-header\",\n        templateUrl: \"header.component.html\",\n        styleUrls: [\"header.component.css\"]\n})\nexport class HeaderComponent implements AfterViewInit {\n        @Input(\"imageUrl\") imageUrl: string\n        @Input(\"headerText\") headerText: string\n        @ViewChild(\"headerTextElement\") headerTextElement: ElementRef\n        @Input(\"color\") color: string = \"white\"\n\n        ngAfterViewInit() {\n                this.headerTextElement.nativeElement.style.color = this.color\n        }\n\n}","<div class=\"container\">\n        <div class=\"icon-container\">\n                <app-image-fab [imageUrl]=\"this.imageUrl\"></app-image-fab>\n        </div>\n        <div class=\"text-container\">\n                <div class=\"text\" #headerTextElement>\n                        {{this.headerText}}\n                </div>\n        </div>\n</div>","import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from \"@angular/core\"\nimport { ChatsService } from \"../../../services/chats\"\nimport { Subscription } from \"rxjs\"\nimport { Chat } from \"../../../models/chat\"\nimport { UsersService } from 'src/app/services/users'\nimport { ChatService } from 'src/app/services/chat'\n\n\n@Component({\n  selector: \"app-chat-display\",\n  templateUrl: \"chat-display.component.html\",\n  styleUrls: [\"chat-display.component.css\"],\n  providers: [ChatService]\n})\nexport class ChatDisplayComponent implements OnInit, OnDestroy {\n  selectedChatSub: Subscription\n  selectedChat: Chat\n  selectedChatIdSub: Subscription\n  constructor(private chatsService: ChatsService, private chatService: ChatService, private usersService: UsersService) {}\n\n  ngOnInit() {\n   this.selectedChatIdSub = this.chatsService.getSelectedChatIdUpdated()\n    .subscribe((chatId: string) => {\n      if (this.selectedChat !== undefined && this.selectedChat._id === chatId) return\n      this.chatService.setChatId(chatId)\n      this.selectedChatSub = this.chatService.getChatUpdated()\n        .subscribe(chat => {\n          this.selectedChat = chat\n          this.usersService.users = undefined\n          var userIds = []\n          for (var i = 0; i < this.selectedChat.subs.length; i++) {\n            const userId = this.selectedChat.subs[i]\n            if (userIds.indexOf(userId) === -1) {\n              userIds.push(userId)\n            }\n          }\n          this.usersService.getUsers(userIds)\n        })\n      this.chatService.getChat(true)\n    })\n  }\n  //Avoid memory leaks\n  ngOnDestroy() {\n    if (this.selectedChatIdSub !== undefined && this.selectedChatIdSub === null) {\n      this.selectedChatIdSub.unsubscribe()\n    }\n    if (this.selectedChatSub !== undefined && this.selectedChatSub !== null) {\n      this.selectedChatSub.unsubscribe()\n    }\n  }\n}\n","<div class=\"container transform-opacity\" >\n      <app-chat-title></app-chat-title>\n      <app-messages></app-messages>\n      <div \n            *ngIf=\"this.selectedChat !== null && this.selectedChat !== undefined\" \n            [routerLink]=\"['/api/chat/view', this.selectedChat._id]\"\n            class=\"chat-button transform-opacity transform-border transform-top\"\n      >CHAT\n      </div>\n</div>\n\n\n\n\n\n","import { Component } from '@angular/core'\nimport { ChatsService } from 'src/app/services/chats';\n\n@Component({\n  selector: \"app-home-page\",\n  templateUrl: \"home-page.component.html\",\n  styleUrls: [\"home-page.component.css\"],\n  providers: [ChatsService]\n})\nexport class HomePageComponent {\n  constructor(private chatsService: ChatsService) {}\n\n  ngOnInit() {\n    var chatIds = []\n    if (this.chatsService.selectedChatId === undefined || this.chatsService.selectedChatId === null) {\n      this.chatsService.selectedChatId = \"--\"\n    }\n    if (this.chatsService.chats !== undefined) return\n    this.chatsService.getPopularChatIds()\n      .then( (resolve: string[]) => {\n        for (var i = 0; i < resolve.length; i++) {\n          const chatId = resolve[i]\n          if (chatIds.indexOf(chatId) === -1) {\n            chatIds.push(chatId)\n          }\n        }\n        this.chatsService.getRecentChatIds()\n          .then( (resolve: string[]) => {\n            for (var i = 0; i < resolve.length; i++) {\n              const chatId = resolve[i]\n              if (chatIds.indexOf(chatId) === -1) {\n                chatIds.push(chatId)\n              }\n            }\n            this.chatsService.getRecommendedChatIds()\n            .then( (resolve: string[]) => {\n              for (var i = 0; i < resolve.length; i++) {\n                const chatId = resolve[i]\n                if (chatIds.indexOf(chatId) === -1) {\n                  chatIds.push(chatId)\n                }\n              }\n              if (this.chatsService.selectedChatId === \"--\") {\n                this.chatsService.setSelectedChatId(chatIds[0])\n              }\n              this.chatsService.getChats(chatIds)\n              \n          })\n      }) \n    })\n  }\n\n}\n","<app-navbar>\n    <div class=\"left\">\n        <app-header \n            [headerText]=\"'Search Chats'\" \n            [imageUrl]=\"'../../../assets/images/Search2.png'\"\n        ></app-header>\n    </div>\n    <div class=\"middle\">\n        <app-chat-display></app-chat-display>\n        <!-- <div class=\"temp\">\n\n        </div> -->\n    </div>\n    <div class=\"right\">\n        <div class=\"chat-list-container\">\n                <app-popular-chats></app-popular-chats>\n        </div>\n        <div class=\"chat-list-container\">\n                <app-recent-chats></app-recent-chats>\n        </div>\n        <div class=\"chat-list-container\">\n                <app-recommended-chats></app-recommended-chats>\n        </div>\n    </div>\n</app-navbar>\n\n\n","import { Component, OnInit } from \"@angular/core\"\nimport { ChatsService } from 'src/app/services/chats';\n\n@Component({\n        selector: \"app-popular-chats\",\n        templateUrl: \"popular-chats.component.html\",\n        styleUrls: [\"popular-chats.component.css\"]\n})\nexport class PopularChatsComponent implements OnInit {\n        chatIds: string[] = []\n        constructor(private chatsService: ChatsService) {}\n\n        ngOnInit() {\n                this.chatsService.getPopularChatIds()\n                        .then( (chatIds: string[]) => {\n                                this.chatIds = chatIds\n                        })\n        }\n}","<div class=\"container\">\n        <app-header \n                [headerText]=\"'Popular Chats'\" \n                [imageUrl]=\"'../../../assets/images/PopularTwo.png'\"\n        ></app-header>\n        <div class=\"chat-selection-container\">\n                <app-chat-selection \n                        [chatIds]=\"this.chatIds\"\n                        [color]=\"'rgb(173, 243, 250)'\"\n                ></app-chat-selection>\n        </div>\n        \n</div>\n        ","import { Component, OnInit } from \"@angular/core\"\nimport { ChatsService } from 'src/app/services/chats';\n\n@Component({\n        selector: \"app-recent-chats\",\n        templateUrl: \"recent-chats.component.html\",\n        styleUrls: [\"recent-chats.component.css\"]\n})\nexport class RecentChatsComponent implements OnInit {\n        chatIds: string[] = []\n        constructor(private chatsService: ChatsService) {}\n\n        ngOnInit() {\n                this.chatsService.getRecentChatIds()\n                        .then( (chatIds: string[]) => {\n                                this.chatIds = chatIds\n                        })\n        }\n}","<div class=\"container\">\n        <app-header \n                [headerText]=\"'New Chats'\" \n                [imageUrl]=\"'../../../assets/images/NewChatOne.png'\"\n        ></app-header>\n        <div class=\"chat-selection-container\">\n                <app-chat-selection \n                        [chatIds]=\"this.chatIds\"\n                        [color]=\"'rgb(173, 243, 250)'\"\n                ></app-chat-selection>\n        </div>\n        \n</div>\n","import { Component, OnInit } from \"@angular/core\"\nimport { ChatsService } from 'src/app/services/chats';\n\n@Component({\n        selector: \"app-recommended-chats\",\n        templateUrl: \"recommended-chats.component.html\",\n        styleUrls: [\"recommended-chats.component.css\"]\n})\nexport class RecommendedChatsComponent implements OnInit {\n        chatIds: string[] = []\n        constructor(private chatsService: ChatsService) {}\n\n        ngOnInit() {\n                this.chatsService.getRecommendedChatIds()\n                        .then( (chatIds: string[]) => {\n                                this.chatIds = chatIds\n                        })\n        }\n}","<div class=\"container\">\n        <app-header \n                [headerText]=\"'Recommended Chats'\" \n                [imageUrl]=\"'../../../assets/images/RecomOne.png'\"\n            ></app-header>\n        <div class=\"chat-selection-container\">\n                <app-chat-selection \n                        [chatIds]=\"this.chatIds\"\n                        [color]=\"'rgb(173, 243, 250)'\"\n                ></app-chat-selection>\n        </div>\n        \n</div>\n        ","import { Component, Input } from \"@angular/core\"\nimport { DomSanitizer } from \"@angular/platform-browser\"\n\n@Component({\n        selector: \"app-image-fab\",\n        templateUrl: \"image-fab.component.html\",\n        styleUrls: [\"image-fab.component.css\"]\n})\nexport class ImageFabComponent {\n        @Input() imageUrl: string\n        @Input() showStatus: boolean\n        @Input() online: boolean\n        constructor(public DomSanitationService: DomSanitizer) {}\n}\n","<div class=\"container\">\n        <img \n                [src]=\"DomSanitationService.bypassSecurityTrustUrl(imageUrl)\" \n                class=\"icon-button\" \n                object-fit=\"contain\"\n        >\n        <div class=\"online-marker\" *ngIf=\"this.online && this.showStatus\"></div>\n        <div class=\"offline-marker\" *ngIf=\"!this.online && this.showStatus\"></div>\n</div>\n","import { Component, ViewEncapsulation } from '@angular/core'\nimport { AuthenticationService } from '../../services/authentication'\nimport { NgForm } from '@angular/forms'\n\n@Component({\n  selector: \"app-login-page\",\n  templateUrl: \"login-page.component.html\",\n  styleUrls: [\"login-page.component.css\"],\n  encapsulation: ViewEncapsulation.None\n})\nexport class LoginPageComponent {\n  errorMessage: string\n  loggingIn: boolean = false\n  constructor(private authService : AuthenticationService) {}\n\n  login(loginForm: NgForm) {\n    if (this.loggingIn) return\n    if (loginForm.invalid) this.errorMessage = \"Enter missing data\"\n    else {\n      this.loggingIn = true\n      const email = loginForm.value.email\n      const password = loginForm.value.password\n      this.authService.login(email, password)\n        .then( (resolve: string) => {\n          this.errorMessage = resolve\n          loginForm.resetForm()\n          this.loggingIn = false\n        })\n    }\n  }\n}\n","<div class=\"login-background\">\n  <mat-card class=\"login-form-card\">\n    <div class=\"login-form-container\">\n      <!-- Inside Container (start) -->\n      <form #loginForm=\"ngForm\" (submit)=\"login(loginForm)\">\n          <!-- Email Field -->\n          <div class=\"form-input-container\">\n            <mat-form-field>\n              <input\n                matInput\n                type=\"text\"\n                name=\"email\"\n                ngModel\n                required\n                placeholder=\"email\"\n                #email=\"ngModel\"\n                class=\"input-field\"\n              >\n              <mat-error *ngIf=\"email.invalid\">Enter your email</mat-error>\n            </mat-form-field>\n          </div>\n          <!-- Password Field -->\n          <div class=\"form-input-container\">\n            <mat-form-field>\n              <input\n                matInput\n                name=\"password\"\n                ngModel\n                required\n                placeholder=\"Password\"\n                #password=\"ngModel\"\n                type=\"password\"\n                class=\"input-field\"\n              >\n              <mat-error *ngIf=\"password.invalid\">Enter your password</mat-error>\n            </mat-form-field>\n          </div>\n\n          <!-- Submit Button -->\n          <div class=\"form-button-container\">\n            <button mat-raised-button type=\"submit\" class=\"form-submit-button\">Login</button>\n          </div>\n          <div *ngIf=\"this.errorMessage !== undefined\" class=\"error-message\">\n            {{this.errorMessage}}\n          </div>\n        </form>\n    </div>\n  </mat-card>\n</div>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { AuthenticationService } from \"../../services/authentication\"\nimport { UserService } from \"../../services/user\"\nimport { Subscription } from 'rxjs'\nimport { User } from 'src/app/models/user'\n\n@Component({\n  selector: \"app-navbar\",\n  templateUrl: \"navbar.component.html\",\n  styleUrls: [\"navbar.component.css\"]\n})\nexport class NavbarComponent implements OnInit, OnDestroy {\n  userSub : Subscription\n  user : User\n  constructor(private authService : AuthenticationService, private userService : UserService) {}\n\n  ngOnInit() {\n    this.userSub = this.userService.getUserUpdated()\n      .subscribe(user => {\n        this.user = user\n    })\n    this.userService.getUser()\n  }\n\n  //Checks if user is logged in\n  isAuthenticated() {\n    return this.authService.isAuthenticated()\n  }\n\n  //Avoids memory leak\n  ngOnDestroy() {\n    this.userSub.unsubscribe()\n  }\n}\n","<div class=\"nav-container\">\n  <mat-toolbar class=\"navbar-main\">\n    <!-- Shows on small displays (start) -->\n    <div fxShow=\"true\" fxHide.gt-sm=\"true\">\n      <button mat-icon-button (click)=\"sidenav.toggle()\" class=\"sandwich-icon\">\n        <mat-icon [inline]=\"true\">menu</mat-icon>\n      </button>\n    </div>\n    <!-- Shows on small displays (end) -->\n    <!-- <span class=\"spacer\"></span> -->\n\n    <!-- Div there so the app-user-icon is the right size -->\n    <div class=\"account-button transform-border\" *ngIf=\"this.user != undefined && this.user != null\">\n      <app-user-icon \n        [routerLink]=\"'/api/user'\"  \n        *ngIf=\"this.user.image === '$$$Default$$$'\" \n        class=\"change-on-hover\" \n        [showStatus]=\"true\" \n        [online]=\"this.user.online\"\n        style=\"outline: 0 !important;\"\n      ></app-user-icon>\n      <app-image-fab \n        [routerLink]=\"'/api/user'\"  \n        *ngIf=\"this.user.image != '$$$Default$$$'\" \n        [imageUrl]=\"this.user.image\" \n        [showStatus]=\"true\" \n        [online]=\"this.user.online\" \n        class=\"change-on-hover\"\n        style=\"outline: 0 !important;\"\n      ></app-image-fab>\n    </div>\n    <span *ngIf=\"this.isAuthenticated()\" class=\"flexExpand\"></span>\n    <div \n      [routerLink]=\"''\" \n      class=\"home-link \n      transform-color \n      transform-border-bottom \n      transform-border-top\n      no-select\"\n    >RUMBLE</div> \n    <!-- Shows on large displays (start) -->\n    <!-- <span fxShow=\"true\" fxHide.lt-md=\"true\" class=\"flexExpand\"></span> -->\n    <span class=\"flexExpand\" *ngIf=\"!isAuthenticated()\"></span>\n    <div fxShow=\"true\" fxHide.lt-md=\"true\">\n      <button mat-raised-button class=\"button-login\" [routerLink]=\"'/api/authentication/login'\" style=\"margin-right: 10px;\" *ngIf=\"!isAuthenticated()\">Login</button>\n      <button mat-raised-button class=\"button-register\" [routerLink]=\"'/api/authentication/register'\" *ngIf=\"!isAuthenticated()\">Register</button>\n    </div>\n    <!-- Shows on large displays (end) -->\n  </mat-toolbar>\n\n  <!-- Shows on small displays (start) -->\n  <mat-sidenav-container fxFlexFill class=\"home-container\">\n    <mat-sidenav #sidenav fxLayout=\"column\">\n      <div fxLayout=\"column\">\n        <button mat-raised-button [routerLink]=\"'/api/authentication/login'\" class=\"button-login\" *ngIf=\"!isAuthenticated()\">Login</button>\n        <button mat-raised-button [routerLink]=\"'/api/authentication/register'\" class=\"button-register\" *ngIf=\"!isAuthenticated()\">Register</button>\n        <button (click)=\"sidenav.toggle()\" mat-raised-button>Close</button>\n      </div>\n    </mat-sidenav>\n    <ng-content></ng-content>\n  </mat-sidenav-container>\n  <!-- Shows on small displays (end) -->\n</div>\n","import { Component } from \"@angular/core\"\nimport { NgForm } from '@angular/forms';\nimport { AuthenticationService } from '../../services/authentication'\n\n@Component({\n  selector: \"app-register-page\",\n  templateUrl: \"register-page.component.html\",\n  styleUrls: [\"register-page.component.css\"]\n})\nexport class RegisterPageComponent {\n  errorMessage: string\n  registering: boolean = false;\n  constructor(private authService: AuthenticationService) {}\n\n  register(registerForm: NgForm) {\n    if (this.registering) return \n    else if (registerForm.invalid) {\n      this.errorMessage = \"Enter missing data\"\n      return\n    }\n    const username = registerForm.value.username\n    const email = String(registerForm.value.email).toLowerCase()\n    const password = registerForm.value.password\n    const reEnteredPassword = registerForm.value.reEnteredPassword\n    if (password !== reEnteredPassword) {\n      this.errorMessage = \"Passwords do not match\"\n      return\n    }\n    if (!this.isValidEmail(email)) {\n      this.errorMessage = \"Email is invalid\"\n      return \n    } \n    if (!this.passwordIsSafe(password)) {\n      this.errorMessage = \"Insecure password\"\n      alert(\"Password must contain:\\n-One capital letter\\n-One lowercase letter\\n-One special character\\n-One number\\n-At least 8 characters\")\n      return\n    }\n    this.registering = true\n    this.authService.register(username, email, password)\n      .then( (resolve: string) => {\n        this.errorMessage = resolve\n        this.registering = false\n      })\n  }\n  //Checks if password is safe\n  passwordIsSafe(password: string) {\n    const regex = /^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{8,}$/\n    return regex.test(password)\n  }\n\n  //Checks if email syntax is correct\n  isValidEmail(email: string) {\n    const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    return regex.test(email);\n  }\n}\n","<div class=\"register-background\">\n    <mat-card class=\"register-form-card\">\n      <div class=\"register-form-container\">\n        <!-- Inside Container (start) -->\n        <form #registerForm=\"ngForm\" (submit)=\"register(registerForm)\">\n            <!-- Username Field -->\n            <div class=\"form-input-container\">\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"text\"\n                  name=\"username\"\n                  ngModel\n                  required\n                  placeholder=\"username\"\n                  #username=\"ngModel\"\n                  class=\"input-field\"\n                >\n                <mat-error *ngIf=\"username.invalid\">Enter your username</mat-error>\n              </mat-form-field>\n            </div>\n\n            <!-- Email Field -->\n            <div class=\"form-input-container\">\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"text\"\n                  name=\"email\"\n                  ngModel\n                  required\n                  placeholder=\"email\"\n                  #email=\"ngModel\"\n                  class=\"input-field\"\n                >\n                <mat-error *ngIf=\"email.invalid\">Enter your email</mat-error>\n              </mat-form-field>\n            </div>\n\n            <!-- Password Field -->\n            <div class=\"form-input-container\">\n              <mat-form-field>\n                <input\n                  matInput\n                  name=\"password\"\n                  ngModel\n                  required\n                  placeholder=\"password\"\n                  #password=\"ngModel\"\n                  type=\"password\"\n                  class=\"input-field\"\n                >\n                <mat-error *ngIf=\"password.invalid\">Enter your password</mat-error>\n              </mat-form-field>\n            </div>\n\n            <!-- Re-entered Password Field -->\n            <div class=\"form-input-container\">\n              <mat-form-field>\n                <input\n                  matInput\n                  name=\"reEnteredPassword\"\n                  ngModel\n                  required\n                  placeholder=\"re-enter password\"\n                  #reEnteredPassword=\"ngModel\"\n                  type=\"password\"\n                  class=\"input-field\"\n                >\n                <mat-error>Re-enter your password</mat-error>\n              </mat-form-field>\n              </div>\n\n            <!-- Submit Button -->\n            <div class=\"form-button-container\">\n              <button mat-raised-button type=\"submit\" class=\"form-submit-button\">Register</button>\n            </div>\n            \n            <div *ngIf=\"this.errorMessage !== undefined\" class=\"error-message\">\n                {{this.errorMessage}}\n              </div>\n          </form>\n  <!-- Inside Container (end) -->\n      </div>\n      \n    </mat-card>\n  </div>\n","import { Component, Input } from \"@angular/core\"\n\n@Component({\n        selector: \"app-user-icon\",\n        templateUrl: \"user-icon.component.html\",\n        styleUrls: [\"user-icon.component.css\"]\n})\nexport class UserIconComponent {\n        @Input(\"showStatus\") showStatus: boolean\n        @Input(\"online\") online: boolean\n}","<div class=\"icon-button\">\n        <div class=\"online-marker\" *ngIf=\"this.showStatus && this.online\"></div>\n        <div class=\"offline-marker\" *ngIf=\"this.showStatus && !this.online\"></div>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { ChatsService } from \"../../../services/chats\"\nimport { UserService } from \"../../../services/user\"\nimport { User } from 'src/app/models/user'\nimport { Subscription } from 'rxjs'\n\n@Component({\n        selector: \"app-user-chats-view\",\n        templateUrl: \"user-chats-view.component.html\",\n        styleUrls: [\"user-chats-view.component.css\"]\n})\nexport class UserChatsViewComponent {\n        user: User\n        userSub: Subscription\n        constructor(private userService: UserService) {}\n\n        ngOnInit() {\n                this.userSub = this.userService.getUserUpdated()\n                        .subscribe(user => {\n                                this.user = user\n                        })\n                this.userService.getUser()\n        }\n\n        //Get chat Ids from user chatIds list\n        getChatIds() {\n                if (this.user === undefined || this.user === null) return []\n                var chatIds = []\n                for (var i = 0; i < this.user.chatIds.length; i++) {\n                        chatIds.push(this.user.chatIds[i])\n                }\n                return chatIds\n        }\n\n        ngOnDestroy() {\n                this.userSub.unsubscribe()\n        }\n}","<div class=\"container\">\n        <div class=\"header-container\">\n                <app-header \n                        [headerText]=\"'Subscriptions'\" \n                        [imageUrl]=\"'../../../assets/images/SubsTwo.png'\"\n                ></app-header>     \n        </div>\n        <div class=\"chats-container\">\n                <app-chat-selection \n                        [chatIds]=\"this.getChatIds()\"\n                        [color]=\"'rgb(173, 243, 250)'\"\n                >\n                </app-chat-selection>\n        </div>\n</div>","import { Component, Input } from \"@angular/core\"\nimport { UserService } from 'src/app/services/user'\n\n@Component({\n        selector: \"app-friend-request\",\n        templateUrl: \"friend-request.component.html\",\n        styleUrls: [\"friend-request.component.css\"]\n})\nexport class FriendRequestComponent {\n        @Input() username: string\n        @Input() image: string = \"$$$Default$$$\"\n        @Input() userId: string\n\n        constructor(private userService: UserService) {}\n\n        //Accept user's friend request\n        acceptRequest() {\n                this.userService.acceptFriendRequest(this.userId)\n        }\n\n        //Decline user's friend request\n        declineRequest() {\n                this.userService.declineFriendRequest(this.userId)\n        }\n}","<div class=\"request-container\">\n        <div class=\"request-icon-container\">\n                <app-image-fab \n                        *ngIf=\"this.image !== '$$$Default$$$'\" \n                        [imageUrl]=\"this.image\" \n                        [showStatus]=\"false\" \n                        [online]=\"false\"\n                ></app-image-fab>\n                <app-user-icon \n                        *ngIf=\"this.image === '$$$Default$$$'\" \n                        [showStatus]=\"false\" \n                        [online]=\"false\"\n                ></app-user-icon>\n        </div>\n        <div class=\"request-username-container\">\n                <div class=\"request-username\">\n                        {{this.username}}\n                </div>\n        </div>\n        <div class=\"request-actions-container\">\n                <div \n                        class=\"request-accept \n                        transform-background-color \n                        transform-font-size \n                        transform-color\" \n                        (click)=\"acceptRequest()\"\n                >   ✓\n                </div>\n                <div \n                        class=\"request-decline \n                        transform-background-color \n                        transform-font-size \n                        transform-color\" \n                        (click)=\"declineRequest()\"\n                >   x\n                </div>\n        </div>\n</div>","import { Component, OnInit, OnDestroy} from \"@angular/core\"\nimport { Subscription } from \"rxjs\"\nimport { UserService } from \"../../../services/user\"\nimport { User } from \"../../../models/user\"\nimport { UsersService } from 'src/app/services/users'\n\n@Component({\n        selector: \"app-user-friends-view\",\n        templateUrl: \"user-friends-view.component.html\",\n        styleUrls: [\"user-friends-view.component.css\"]\n})\nexport class UserFriendsViewComponent implements OnInit, OnDestroy {\n        user: User\n        userSub: Subscription\n        constructor(private userService: UserService, private usersService: UsersService) {}\n        \n        ngOnInit() {\n                this.userSub = this.userService.getUserUpdated()\n                        .subscribe(user => {\n                                this.user = user\n                        })\n                this.userService.getUser()\n        }\n\n        getUserSub(subId: string) {\n                if (this.usersService.getUserSub(subId)) {\n                        return this.usersService.getUserSub(subId)\n                }\n                return {\n                        _id: \"-----\",\n                        username: \"loading...\",\n                        image: \"$$$Default$$$\",\n                        online: false\n                }\n        }\n\n        //Avoid memory leaks\n        ngOnDestroy() {\n                this.userSub.unsubscribe()\n        }\n\n\n}","<div class=\"container\">\n        <app-header [headerText]=\"'Friends'\" [imageUrl]=\"'../../../assets/images/FriendsThree.png'\"></app-header>\n        <app-subscriber\n                *ngFor=\"let friendId of this.user.friendIds\" \n                [username]=\"this.getUserSub(friendId).username\" \n                [online]=\"this.getUserSub(friendId).online\"\n                [image]=\"this.getUserSub(friendId).image\"\n        ></app-subscriber>\n        <app-header *ngIf=\"this.user.friendReqIds.length > 0\" [headerText]=\"'Friend Requests'\" [imageUrl]=\"'../../../assets/images/SubsOne.png'\"></app-header>\n        <app-friend-request \n                *ngFor=\"let requestId of this.user.friendReqIds\"\n                [username]=\"this.getUserSub(requestId).username\" \n                [image]=\"this.getUserSub(requestId).image\"\n                [userId]=\"requestId\"\n        ></app-friend-request>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { UserService } from \"../../services/user\"\nimport { Subscription } from \"rxjs\"\nimport { User } from 'src/app/models/user'\nimport { AuthenticationService } from 'src/app/services/authentication'\nimport { ChatsService } from 'src/app/services/chats'\nimport { UsersService } from 'src/app/services/users'\n\n@Component({\n        selector: \"app-user-page\",\n        templateUrl: \"user-page.component.html\",\n        styleUrls: [\"user-page.component.css\"],\n        providers: [ChatsService, UsersService]\n})\nexport class UserPageComponent {\n        user: User\n        userSub: Subscription\n        constructor(\n                private userService: UserService, \n                private authService: AuthenticationService, \n                private chatsService: ChatsService,\n                private usersService: UsersService\n        ) {}\n\n        ngOnInit() {\n                this.userSub = this.userService.getUserUpdated()\n                        .subscribe(user => {\n                                this.user = user\n                                //Collects needed chat subs from database if they have not already been collected\n                                if (this.chatsService.chats === undefined || this.chatsService.chats === null) {\n                                        var chatIds = []\n                                        for (var i = 0; i < this.user.chatIds.length; i++) {\n                                                const chatId = this.user.chatIds[i]\n                                                if (chatIds.indexOf(chatId) === -1) {\n                                                        chatIds.push(chatId)\n                                                }\n                                        }\n                                        this.chatsService.getChats(chatIds)\n                                }\n                                //Collect needed user subs from database if they have not already been collected\n                                if (this.usersService.users === undefined || this.usersService.users === null) {\n                                        var userIds = []\n                                        for (var i = 0; i < this.user.friendIds.length; i++) {\n                                                const userId = this.user.friendIds[i]\n                                                if (userIds.indexOf(userId) === -1) {\n                                                        userIds.push(userId)\n                                                }\n                                        }\n                                        for (var i = 0; i < this.user.friendReqIds.length; i++) {\n                                                const userId = this.user.friendReqIds[i]\n                                                if (userIds.indexOf(userId) === -1) {\n                                                        userIds.push(userId)\n                                                }\n                                        }\n                                        this.usersService.getUsers(userIds)\n                                }\n                        })\n                this.userService.getUser()\n        }\n\n        isAuthenticated() {\n                return this.authService.isAuthenticated()\n        }\n\n        //Avoid memoroy leaks\n        ngOnDestroy() {\n                this.userSub.unsubscribe()\n        }\n} ","<app-navbar>\n        <div class=\"left\" *ngIf=\"this.user != null && this.user != undefined\">\n                <app-user-chats-view></app-user-chats-view>\n        </div>\n        <div class=\"middle\" *ngIf=\"this.user != null && this.user != undefined\">\n                <app-user-friends-view></app-user-friends-view>\n        </div>\n\n        <div class=\"right\" *ngIf=\"this.user != null && this.user != undefined\">\n                <app-user-view></app-user-view>\n        </div>\n</app-navbar>","import { Component, OnInit, OnDestroy } from \"@angular/core\"\nimport { NgForm } from \"@angular/forms\"\nimport { UserService } from \"../../../services/user\"\nimport { User } from 'src/app/models/user'\nimport { Subscription } from 'rxjs'\nimport { DomSanitizer } from \"@angular/platform-browser\"\n\n@Component({\n        selector: \"app-user-view\",\n        templateUrl: \"user-view.component.html\",\n        styleUrls: [\"user-view.component.css\"]\n})\nexport class UserViewComponent {\n        user: User\n        userSub: Subscription\n        selectedImageUrl\n        selectedImage\n\n        constructor(private userService: UserService, public DomSanitationService: DomSanitizer) {}\n        \n        ngOnInit() {\n                this.userSub = this.userService.getUserUpdated()\n                        .subscribe(user => {\n                                this.user = user\n                        })\n                this.userService.getUser()\n        }\n\n        //Sets the selected image to the image selected by the user\n        onImageSelected(event) {\n                this.selectedImage = event.target.files[0]\n                const reader = new FileReader()\n                reader.readAsDataURL(this.selectedImage)\n                reader.onload = () => {\n                        const originalDataUrl = reader.result\n                        //Scaled the image down to a 400 X 400 square\n                        this.scaleImage(originalDataUrl, 400, 400, this.selectedImage.type, 0.7, (dataUrl) => {\n                                this.selectedImageUrl = dataUrl\n                        })\n                }\n        }\n\n        //https://codepen.io/shrinivas93/pen/xdLLPN\n        scaleImage(dataUrl, newWidth: number, newHeight: number, imageType: string, imageArguments: number, callback) {\n                imageType = imageType || \"image/jpeg\";\n                imageArguments = imageArguments || 0.7;\n                const image = new Image();\n                image.onload = function() {\n                  const canvas = document.createElement(\"canvas\");\n                  canvas.width = newWidth;\n                  canvas.height = newHeight;\n                  const ctx = canvas.getContext(\"2d\");\n                  ctx.drawImage(image, 0, 0, newWidth, newHeight);\n                  const newDataUrl = canvas.toDataURL(imageType, imageArguments);\n                  callback(newDataUrl);\n                }\n                image.src = dataUrl;\n        }\n\n        //Uploads image\n        uploadImage() {\n                if (this.selectedImageUrl === undefined || this.selectedImageUrl === null) return\n                this.userService.setProfileImage(this.selectedImageUrl)\n        }\n\n        //Sends a friend request\n        sendFriendReq(requestForm: NgForm) {\n                const email = requestForm.value.email.trim()\n                if (email == \"\" || email == \"null\" || email == undefined) { return }\n                this.userService.sendFriendRequestToEmail(email)\n        }\n\n        ngOnDestroy() {\n                this.userSub.unsubscribe()\n        }\n}","<div class=\"container\">\n        <div class=\"user-container\">\n                <div class=\"user-icon-container\">\n                        <app-image-fab *ngIf=\"this.user.image != '$$$Default$$$'\" [imageUrl]=\"this.user.image\"></app-image-fab>\n                        <app-user-icon *ngIf=\"this.user.image === '$$$Default$$$'\"></app-user-icon>\n                </div>\n                <div class=\"user-username-container\">\n                        <div class=\"user-username\">\n                                {{this.user.username}}\n                        </div>\n                </div>\n        </div>\n        <h2 class=\"user-options-header\">\n                Options\n        </h2>\n        <div class=\"user-options-container\">\n                <div class=\"user-option-container\">\n                        <div class=\"user-option-header\">\n                                Set Your Icon\n                        </div>\n                        <div class=\"user-option\">\n                                <input type=\"file\"\n                                        accept=\"image/*\"\n                                        (change)=\"onImageSelected($event)\"\n                                        class=\"image-input\"\n                                >\n                                <div \n                                        *ngIf=\"this.selectedImage != null && this.selectedImage != undefined\" \n                                        class=\"image-upload-button\n                                        transform-color\n                                        no-select\" \n                                        (click)=\"uploadImage()\" \n                                >Set Icon</div>\n                        </div>\n                </div>\n                <div class=\"user-option-container margin-top\">\n                        <div class=\"user-option-header\">\n                                Send a Friend Request\n                        </div>\n                        <div class=\"user-option\">\n                                <div class=\"friend-request-form-container\">\n                                        <form #friendReqForm=\"ngForm\" (submit)=\"sendFriendReq(friendReqForm)\" class=\"friend-request-form\">\n                                                <div class=\"friend-request-input-container\">\n                                                        <mat-form-field>\n                                                                <input\n                                                                        matInput\n                                                                        type=\"text\"\n                                                                        name=\"email\"\n                                                                        ngModel\n                                                                        placeholder=\"email\"\n                                                                        #email=\"ngModel\"\n                                                                        class=\"friend-request-email-field\"\n                                                                >\n                                                        </mat-form-field>\n                                                        <div \n                                                                *ngIf=\"friendReqForm.value.email !== ''\"\n                                                                class=\"friend-request-button\n                                                                transform-color\n                                                                no-select\" \n                                                                (click)=\"sendFriendReq(friendReqForm)\"\n                                                        >Send</div>\n                                                </div>\n                                        </form>\n                                </div>\n                                \n                        </div>\n                </div>\n                <div class=\"user-option-container margin-top\">\n                        <div class=\"user-option-header\">\n                                Create a New Chat\n                        </div>\n                        <div class=\"user-option\">\n                                <div \n                                        [routerLink]=\"'/api/chat/chat-create'\"\n                                        class=\"create-chat-button\n                                        transform-color\n                                        no-select\" \n                                >Create</div>\n                        </div>\n                </div>\n        </div>\n</div>","//Service for the authentication API\nimport { Injectable } from \"@angular/core\"\nimport { HttpHeaders, HttpClient } from '@angular/common/http'\nimport { Tokens } from \"../models/token\"\nimport { Location } from '@angular/common';\nconst BASE_URL = \"http://localhost:3000/api/authentication/\"\nconst BASE_USER_URL = \"http://localhost:3000/api/user/\"\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AuthenticationService {\n  constructor(private http: HttpClient, private location : Location) {\n    console.log(\"Authentication Service Initialized\")\n  }\n\n  //Returns clients jwt token\n  getToken() {\n    return sessionStorage.getItem(\"accessToken\")\n  }\n  \n  //Removes token from session storage\n  clearTokens() {\n    sessionStorage.clear()\n  }\n\n  setAccessToken(token) {\n    this.clearTokens()\n    sessionStorage.setItem(\"accessToken\", token)\n  }\n\n  isAuthenticated() {\n    const token = this.getToken()\n    if (token) return true\n    else return false\n  }\n\n  //Changes client url\n  go(route: string) {\n    this.location.replaceState(route);\n    window.location.reload()\n  }\n\n  //Register a new user\n  register(username: string, email: string, password: string) {\n    return new Promise(resolve => {\n      var headers = new HttpHeaders()\n      headers = headers.append('Content-type', 'application/json')\n      const body = {\n        username: username,\n        email: email,\n        password: password\n      }\n      this.http.post(BASE_URL + \"register/createUser\", body, { headers: headers })\n        .subscribe((res: {status: string, data: any}) => {\n          if (res.status === '0') {\n            const accessToken = res.data\n            if (accessToken) {\n              //User was created\n              this.setAccessToken(accessToken)\n              this.go(\"\")\n            }\n          } else {\n            resolve(res.data)\n          }\n        })\n    })\n  }\n\n  //Logs in a given user\n  login(email: string, password: string) {\n    return new Promise(resolve => {\n      var headers = new HttpHeaders()\n      headers = headers.append('Content-type', 'application/json')\n      const body = {\n        email: email,\n        password: password\n      }\n      this.http.post(BASE_URL + \"login/authenticate\", body, { headers: headers })\n        .subscribe((res: {status: string, data: any}) => {\n          if (res.status === '0') {\n            const accessToken = res.data\n            if (accessToken) {\n              //User was authenticated\n              this.setAccessToken(accessToken)\n              this.setUserStatusOnline()\n                .then( () => this.go(\"\") )\n            }\n          } else {\n            resolve(res.data)\n          }\n        })\n    })\n  }\n\n  //Set user status as online\n  setUserStatusOnline() {\n    return new Promise((resolve, reject) => {\n      this.http.get(BASE_USER_URL + \"userOnline\")\n       .subscribe((res: {status: string, data: string} ) => {\n        console.log(res)\n        resolve(\"User status was set\")\n       })\n    })\n  }\n}\n","//Service for the chat API\n//Handles the creation of a single chat\nconst BASE_URL = \"http://localhost:3000/api/chat/\"\nimport { Injectable } from \"@angular/core\"\nimport { Location } from \"@angular/common\"\nimport { HttpHeaders, HttpClient } from '@angular/common/http'\nimport { Subject } from 'rxjs'\nimport { Chat } from '../models/chat'\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ChatCreateService {\n        newChat: Chat\n        newChatUpdated = new Subject<Chat>()\n\n        constructor(private http: HttpClient, private location: Location) {}\n\n        getNewChatUpdated() {\n                return this.newChatUpdated.asObservable()\n        }\n\n        //Initializes new chat\n        initNewChat() {\n                this.newChat = {\n                        _id: undefined,\n                        tags: [],\n                        title: undefined,\n                        messages: [],\n                        category: undefined,\n                        adminId: undefined,\n                        subs: [],\n                        global: undefined,\n                        image: \"$$$Default$$$\"\n                }\n        }\n\n        //Adds a tag to the new chat\n        addTag(newTag: string) {\n                if (this.newChat === undefined || this.newChat === null) return \n                else if (this.newChat.tags.indexOf(newTag) == -1 && this.newChat.tags.length < 10) {\n                        this.newChat.tags.push(newTag)\n                        this.updateNewChat()\n                }\n        }\n        \n        //Removes a tag from the new chats list of tags\n        removeTag(tagToRemove: string) {\n                if (this.newChat === undefined || this.newChat === null) return \n                const indexOfTag = this.newChat.tags.indexOf(tagToRemove)\n                if (indexOfTag >= 0) {\n                        this.newChat.tags.splice(indexOfTag, 1)\n                        this.updateNewChat()\n                }\n        }\n\n        //Changes client url\n        go(route: string) {\n                this.location.replaceState(route);\n                window.location.reload()\n        }\n    \n        //Create new chat\n        postChat(title: string, adminId: string, category: string, global: boolean) {\n                const body = {\n                        title: title,\n                        adminId: adminId,\n                        category: category,\n                        tags: this.newChat.tags,\n                        global: global\n                }\n        var headers = new HttpHeaders()\n        headers = headers.append('Content-type', 'application/json')\n        this.http.post(BASE_URL + \"chat-create/create\", body, { headers: headers })\n                .subscribe( (res: string ) => {\n                        console.log(res)\n                        //Chat was created\n                        this.postTags(this.newChat.tags, res)\n                        .then( () => this.postCategory(category, res)\n                        .then( () => {\n                                //Visit then chat once it's been created\n                                this.go(\"api/chat/view/\" + res)\n                        })\n                )\n          })\n      }\n    \n      //Add newly created tags and update existing tags with chat sub\n      postTags(tags: string[], chatId: string) {\n                return new Promise((resolve, reject) => {\n                        for (var i = 0; i < tags.length; i++) {\n                                const body = {\n                                        tag: tags[i],\n                                        chatId: chatId\n                                }\n                                var headers = new HttpHeaders()\n                                headers = headers.append('Content-type', 'application/json')\n                                this.http.post(BASE_URL + \"chat-create/addTag\", body, { headers: headers })\n                                        .subscribe( res => console.log(res) )\n                                }\n                        resolve(0)\n                })\n        }\n    \n        //Post category from newly created chat\n        postCategory(category: string, chatId: string) {\n                return new Promise((resolve, reject) => {\n                        const body = {\n                                category: category,\n                                chatId: chatId\n                        }\n                        var headers = new HttpHeaders()\n                        headers = headers.append('Content-type', 'application/json')\n                        this.http.post(BASE_URL + \"chat-create/addCategory\", body, { headers: headers })\n                                .subscribe( res => console.log(res) )\n                        resolve(0)\n                })\n        }\n        \n        //Update new chat\n        updateNewChat() {\n                if (this.newChat === undefined || this.newChat === null) return \n                this.newChatUpdated.next({...this.newChat})\n        }\n}","//Service for the chat API\n//Handles a single chat\nconst CHAT_API = \"http://localhost:3000/api/chat/\"\nimport { Injectable } from \"@angular/core\"\nimport { HttpHeaders, HttpClient } from '@angular/common/http'\nimport { Subject } from 'rxjs'\nimport { Chat } from '../models/chat'\nimport { Message } from \"../models/message\"\nimport * as io from 'socket.io-client'\nimport { ChatSub } from '../models/chat-sub'\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ChatService {\n  socket: SocketIOClient.Socket\n  chat: Chat\n  chatUpdated = new Subject<Chat>()\n  chatId: string\n  constructor(private http: HttpClient) {}\n\n  //Get subscription to chat object\n  getChatUpdated() {\n    return this.chatUpdated.asObservable()\n  }\n\n  initChatService(chatId: string) {\n    this.setChatId(chatId)\n    console.log(\"Chat Service Initialized\")\n    this.initServerSocket()\n    this.socket = io.connect(\"http://localhost:3000\", )\n    this.initClientSocket()\n  }\n  //Sets the chat id\n  setChatId(chatId: string) {\n    this.chatId = chatId\n  }\n\n  //Returns chat sub\n  getChatSub() : ChatSub {\n    return {\n      _id: this.chat._id, \n      title: this.chat.title, \n      image: this.chat.image,\n      tags: this.chat.tags,\n      subCount: this.chat.subs.length\n    }\n  }\n\n  //Updates chat\n  getChat(query=false) {\n    if (this.chatId === null || this.chatId === undefined || (!query && this.chat !== undefined && this.chat !== null)) {\n      this.updateChat()\n      return\n    } \n    this.http.get(CHAT_API + \"data/\" + this.chatId)\n    .subscribe((res: Chat) => {\n      this.chat = res\n      this.updateChat()\n    })\n  }\n\n  //Creates link between the socket on the client and the socket on the server\n  initServerSocket() {\n    this.http.get(CHAT_API + \"init\")\n      .subscribe(res => {\n        console.log(res)\n      })\n  }\n\n  //Declares function of client socket\n  initClientSocket() {\n    const _this = this\n    this.socket.on(\"message-posted-to-chat-\" + this.chatId, function(message: Message) {\n      _this.chat.messages.push(message)\n      _this.updateChat()\n    })\n  }\n\n  //Request message post to database\n  postMessage(message: string, senderId: string, timestamp: number) {\n    this.socket.emit(\"message-posted-to-server\", {\n      text: message,\n      senderId: senderId,\n      chatId: this.chatId,\n      timestamp: timestamp\n    })\n  }\n\n  // Requests a subscription to a given chat\n  subscribeToChat() {\n    return new Promise( (resolve, reject) => {\n      if (this.chatId == undefined || this.chatId == null) reject(\"Bad Data\")\n      const body = {\n        chatId: this.chatId\n      }\n      var headers = new HttpHeaders()\n      headers = headers.append('Content-type', 'application/json')\n      this.http.post(CHAT_API + \"subscribe/\", body, { headers: headers })\n        .subscribe( (res: string) => {\n          //Get user and not just user id\n          if (res == undefined || res == null) reject(\"Subscription was unsuccessful\")\n          this.chat.subs.push(res)\n          this.updateChat()\n          resolve(0)\n        })\n    })\n  }\n\n  // Requests a unsubscription to a given chat\n  unsubscribeFromChat() {\n    return new Promise( (resolve, reject) => {\n      if (this.chatId == undefined || this.chatId == null) {\n        reject(\"Bad Data\")\n        return\n      }\n      const body = {\n        chatId: this.chatId\n      }\n      var headers = new HttpHeaders()\n      headers = headers.append('Content-type', 'application/json')\n      this.http.post(CHAT_API + \"unsubscribe/\", body, { headers: headers })\n        .subscribe((res: {status: string, data: string}) => {\n          //Get user and not just user id\n          if (res === undefined || res === null) {\n            reject(\"Subscription was unsuccessful\")\n            return\n          }\n          const index = this.getIndexOfUserId(res.data)\n          if (index !== -1) {\n            this.chat.subs.splice(index, 1)\n          }\n          this.updateChat()\n          resolve(0)\n        })\n    })\n  }\n\n  //Get index of userSub in Chat subs list\n  getIndexOfUserId(userId: string) {\n    for (var i = 0; i < this.chat.subs.length; i++) {\n      const cur = this.chat.subs[i]\n      if (cur === userId) {\n        return i\n      }\n    }\n    return -1\n  }\n\n  //Sets chat image\n  setChatImage(dataUrl) {\n    const body = {\n      imageUrl: dataUrl\n    }\n    var headers = new HttpHeaders()\n    headers = headers.append('Content-type', 'application/json')\n    this.http.post(CHAT_API + \"setChatImage/\" + this.chatId, body, { headers: headers }) \n      .subscribe((res: {status: number, data: string}) => {\n        if (res.status == 1) {\n          this.chat.image = res.data\n          this.updateChat()\n        }\n      })\n  }\n\n  //Checks if user on chat is the chat's admin\n  isAdmin(userId: string) {\n          if (this.chat === undefined || userId === undefined) return false\n          if (this.chat.adminId === userId) return true\n          return false\n  }  \n\n  //Update chat object\n  updateChat() {\n    this.chatUpdated.next({...this.chat})\n  }\n}\n","//Service for the chat API\n//Handles multiple chats\nconst BASE_URL = \"http://localhost:3000/api/chat/\"\nimport { Injectable } from \"@angular/core\"\nimport { HttpHeaders, HttpClient } from '@angular/common/http'\nimport { Subject } from 'rxjs'\nimport { ChatSub } from '../models/chat-sub'\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ChatsService {\n  chats: ChatSub[]\n  chatsUpdated = new Subject<ChatSub[]>()\n  selectedChatId: string\n  selectedChatIdUpdated = new Subject<string>()\n\n  constructor(private http: HttpClient) {}\n\n  //Gets subscription to all chat subs\n  getChatsUpdated() {\n    return this.chatsUpdated.asObservable()\n  }\n\n  //Get selected chat updated\n  getSelectedChatIdUpdated() {\n    return this.selectedChatIdUpdated.asObservable()\n  }\n\n  //Gets chatsub from list of chatsubs that have already been gotten\n  getChatSub(chatId: string) {\n    if (this.chats === undefined || this.chats === null) return\n    for (var i = 0; i < this.chats.length; i++) {\n      if (this.chats[i]._id === chatId) {\n        return this.chats[i]\n      }\n    }\n  }\n\n  //Creates list of chat subs from a list of chatIds\n  getChats(chatIds: string[]) {\n    console.log(\"Getting chats\", chatIds)\n    this.chats = []\n    for (var i = 0; i < chatIds.length; i++) {\n      const chatId = chatIds[i]\n      //Get chat\n      this.getChat(chatId) \n        .then( (chatSub: ChatSub) => {\n          this.chats.push(chatSub)\n          this.updateChats()\n        })\n    }\n  }\n\n  //Promise that resolves a chatSub\n  getChat(chatId: string) {\n    return new Promise((resolve, reject) => {\n      if (chatId === undefined || chatId === null) {\n        reject(\"Bad data\")\n        return\n      }\n      //Send get request for chat sub\n      const body = {\n        _id: chatId\n      }\n      var headers = new HttpHeaders()\n      headers = headers.append('Content-type', 'application/json')\n      this.http.post(BASE_URL + \"chatSub\", body, { headers: headers })\n        .subscribe( (chatSub: ChatSub) => {\n          resolve(chatSub)\n        })\n    })\n  }\n\n  //Get most recent 10 chats ids\n  getRecentChatIds() {\n    return new Promise((resolve) => {\n      this.http.get(BASE_URL + \"chatIds/recent\")\n        .subscribe((res: {status: string, data: string[]}) => {\n          const chatIds: string[] = res.data\n          resolve(chatIds)\n        })\n    })\n  }\n  \n  //Get 10 most popular chats\n  getPopularChatIds() {\n    return new Promise((resolve) => {\n      this.http.get(BASE_URL + \"chatIds/popular\")\n        .subscribe((res: {status: string, data: string[]}) => {\n          const chatIds: string[] = res.data\n          resolve(chatIds)\n        })\n    })\n  }\n\n  //Get 10 recommeded chats\n  getRecommendedChatIds() {\n    return new Promise((resolve) => {\n      this.http.get(BASE_URL + \"chatIds/recommended\")\n        .subscribe((res: {status: string, data: string[]}) => {\n          const chatIds: string[] = res.data\n          resolve(chatIds)\n        })\n    })\n  }\n\n  //Get up to 10 related chats\n  getRelatedChatIds(chatTags: string[], chatCategory: string, chatId: string) {\n    return new Promise((resolve) => {\n      const body = {\n        tags: chatTags,\n        category: chatCategory,\n        chatId: chatId\n      }\n      var headers = new HttpHeaders()\n      headers = headers.append('Content-type', 'application/json')\n      this.http.post(BASE_URL + \"chatIds/related\", body, { headers: headers })\n        .subscribe((res: {status: string, data: any}) => {\n          if (res.status === '0') {\n            resolve(res.data)\n          }\n        })\n    }) \n  }\n\n  //Select chat\n  setSelectedChatId(chatId: string) {\n    this.selectedChatId = chatId\n    this.updateSelectedChatId()\n  }\n\n  //Update chat \n  updateChats() {\n    this.chatsUpdated.next([...this.chats])\n  }\n\n  //Update selected chat id\n  updateSelectedChatId() {\n    if (this.selectedChatId === undefined || this.selectedChatId === null) return\n    this.selectedChatIdUpdated.next(this.selectedChatId)\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { HttpRequest, HttpEvent, HttpHandler, HttpInterceptor } from '@angular/common/http'\nimport { AuthenticationService } from './authentication'\nimport { Observable } from 'rxjs'\n\n@Injectable( { providedIn: \"root\" })\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(public authService : AuthenticationService) {\n    console.log(\"Token Interceptor Initialized\")\n  }\n\n  intercept(request : HttpRequest<any>, next: HttpHandler) : Observable<HttpEvent<any>> {\n    //Injects token into request\n\n    // console.log(\"Injecting token\")\n    request = request.clone({\n      setHeaders: {\n        authorization: \"Bearer \" + this.authService.getToken(),\n      }\n    })\n    //Sends request to next handler\n    return next.handle(request)\n  }\n}","//Service for User API\nconst BASE_URL = \"http://localhost:3000/api/user/\"\nimport { Injectable } from \"@angular/core\"\nimport { HttpHeaders, HttpClient } from '@angular/common/http'\nimport { User } from '../models/user'\nimport { Subject } from 'rxjs'\n\n@Injectable({ providedIn: \"root\"} )\nexport class UserService {\n  user : User;\n  userUpdated = new Subject<User>()\n  constructor(private http: HttpClient) {\n    console.log(\"User Service Initialized\")\n  }\n\n  getUserUpdated() {\n    return this.userUpdated.asObservable()\n  }\n\n  getUser(query=false) {\n    if (query || this.user == undefined || this.user == null) {\n      //Query for user\n      this.http.get(BASE_URL + \"data\")\n      .subscribe((user : User) => {\n        this.user = user\n        this.updateUser()\n      })\n    } else {\n      //Update subscription with existing user\n      this.updateUser();\n    }\n  }\n\n  //Send friend request\n  sendFriendRequestToEmail(userEmail: String) {\n    const body = {\n      email: userEmail\n    }\n    var headers = new HttpHeaders()\n    headers = headers.append('Content-type', 'application/json')\n    this.http.post(BASE_URL + \"friend-request\", body, { headers: headers })\n      .subscribe((res: {status: string, data: any}) => {\n        console.log(res)\n      })\n  }\n\n  acceptFriendRequest(requestId: string) {\n    const body = {\n        requestId: requestId,\n    }\n    var headers = new HttpHeaders()\n    headers = headers.append('Content-type', 'application/json')\n    this.http.post(BASE_URL + \"accept-request\", body, { headers: headers })\n      .subscribe((res: {status: string, data: any}) => {\n        if (res.status === '0') {\n          const index = this.user.friendReqIds.indexOf(requestId)\n          if (index !== -1) {\n            this.user.friendReqIds.splice(index, 1)\n            this.updateUser()\n          }\n          this.user.friendIds.push(requestId)\n          this.updateUser()\n        }\n      })\n  }\n\n  declineFriendRequest(requestId: string) {\n    const body = {\n      requestId: requestId\n    }\n    var headers = new HttpHeaders()\n    headers = headers.append('Content-type', 'application/json')\n    this.http.post(BASE_URL + \"decline-request\", body, { headers: headers }) \n      .subscribe((res: {status: string, data: any}) => {\n        if (res.status === \"0\") {\n          const index = this.user.friendReqIds.indexOf(requestId)\n          if (index !== -1) {\n            this.user.friendReqIds.splice(index, 1)\n            this.updateUser()\n          }\n        }\n      })\n  }\n\n  //Sets profile image\n  setProfileImage(dataUrl) {\n    const body = {\n      imageUrl: dataUrl\n    }\n    var headers = new HttpHeaders()\n    headers = headers.append('Content-type', 'application/json')\n    this.http.post(BASE_URL + \"setProfileImage\", body, { headers: headers }) \n      .subscribe((res: {status: number, data: string}) => {\n        if (res.status == 1) {\n          this.user.image = res.data\n          this.updateUser()\n        }\n      })\n  }\n\n  //Set user status as offline\n  setUserStatusOffline() {\n    return new Promise((resolve, reject) => {\n      this.http.get(BASE_URL + \"userOffline\")\n        .subscribe((res: {status: string, data: string} ) => {\n          console.log(res)\n          resolve(0)\n        })\n    })\n  }\n\n  updateUser() {\n    this.userUpdated.next({...this.user})\n  }\n}","import { Injectable } from \"@angular/core\"\nimport { HttpHeaders, HttpClient } from '@angular/common/http'\nimport { UserSub } from \"../models/user-sub\"\nimport { Subject } from \"rxjs\"\n\nconst BASE_URL = \"http://localhost:3000/api/user/\"\n\n@Injectable({\n        providedIn: \"root\"\n})\nexport class UsersService {\n        users: UserSub[]\n        usersUpdated = new Subject<UserSub[]>()\n\n        constructor(private http: HttpClient) {}\n\n        getUsersUpdated() {\n                return this.usersUpdated.asObservable()\n        }\n\n        //Get user from list of users that have already been retreived from database\n        getUserSub(userId: string) {\n                if (this.users === undefined || this.users === null) return \n                for (var i = 0; i < this.users.length; i++) {\n                        if (this.users[i]._id === userId) {\n                                return this.users[i]\n                        }\n                }\n        }\n\n        //Creates list of user subs from a list of userIds\n        getUsers(userIds: string[]) {\n                console.log(\"Getting users\", userIds)\n                this.users = []\n                for (var i = 0; i < userIds.length; i++) {\n                        const userId = userIds[i]\n                        this.getUser(userId)\n                                .then( (userSub: UserSub) => {\n                                        this.users.push(userSub)\n                                        this.updateUsers()\n                                })\n                }\n        }\n\n        //Promise that resolves a userSub\n        getUser(userId: string) {\n                return new Promise((resolve, reject) => {\n                        if (userId === null || userId === undefined) {\n                                reject(\"Bad data\")\n                                return\n                        }\n                        this.http.get(BASE_URL + \"data/\" + userId)\n                                .subscribe( (userSub: UserSub) => {\n                                        resolve(userSub)\n                                })\n                })   \n        }\n\n        //Updates the users subject\n        updateUsers() {\n                if (this.users) {\n                        this.usersUpdated.next([...this.users])\n                }\n        }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}